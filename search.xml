<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2021/092510.html"/>
      <url>/2021/092510.html</url>
      
        <content type="html"><![CDATA[<p>布隆过滤器</p><p><img src="https://zysite.top/upload/2021/04/logo-775ee8592a6b4875aa483a982c0be3c0.jpg" alt="img">37 次访问发布: 2021-04-10最后编辑: 2021-04-11</p><p> <a href="https://zysite.top/categories/algorithm">· 算法 </a><a href="https://zysite.top/categories/redis">· Redis</a></p><h2 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h2><p>布隆过滤器（Bloom Filter）是一种来检索元素是否在给定大集合中的数据结构，这种数据结构是高效且性能很好的，但缺点是具有一定的错误识别率和删除难度。并且，理论情况下，添加到集合中的元素越多，误报的可能性就越大。</p><p>它由<code>位数组</code>和一系列<code>哈希函数</code>构成。初始时位数组的值全为0。</p><h2 id="布隆过滤器原理"><a href="#布隆过滤器原理" class="headerlink" title="布隆过滤器原理"></a>布隆过滤器原理</h2><h3 id="加入元素"><a href="#加入元素" class="headerlink" title="加入元素"></a>加入元素</h3><p>当一个元素加入布隆过滤器中的时候，会进行如下操作：</p><ol><li>使用布隆过滤器中的哈希函数对元素值进行计算，得到哈希值（有几个哈希函数得到几个哈希值）。</li><li>根据得到的哈希值，在位数组中把对应下标的值置为 1。</li></ol><h3 id="判断元素是否存在"><a href="#判断元素是否存在" class="headerlink" title="判断元素是否存在"></a>判断元素是否存在</h3><p>当我们需要判断一个元素是否存在于布隆过滤器的时候，会进行如下操作：</p><ol><li>使用布隆过滤器中的哈希函数对该元素值进行计算；</li><li>得到多个哈希值之后判断位数组中的对应为位置元素是否都为 1，如果值都为 1，那么说明这个值在布隆过滤器中，如果存在一个值不为 1，说明该元素不在布隆过滤器中。</li></ol><p>由于不同的元素值通过相同的哈希函数可能为得到相同的哈希值，所以布隆过滤器在判断元素存在时为存在误判的情况，但判断元素不存在时是确定的。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol><li>判断给定数据是否存在于一个大量数据集合中：比如判断一个数字是否存在于包含大量数字的数字集中（数字集很大，5亿以上！）、 防止缓存穿透（判断请求的数据是否有效避免直接绕过缓存请求数据库）等等、邮箱的垃圾邮件过滤、黑名单功能等等。</li><li>去重：比如爬给定网址的时候对已经爬取过的 URL 去重。</li></ol><h2 id="Java-实现布隆过滤器"><a href="#Java-实现布隆过滤器" class="headerlink" title="Java 实现布隆过滤器"></a>Java 实现布隆过滤器</h2><p>可以自己实现，也可以使用 Guava 提供的实现。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> top<span class="token punctuation">.</span>zysite<span class="token punctuation">.</span>bloom<span class="token punctuation">.</span>filter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>BitSet<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 布隆过滤器 * * @author Leo * @create 2020/12/25 15:12 **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBloomFilter</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 位数组的大小     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_SIZE <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 通过这个数组可以创建 6 个不同的哈希函数     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> SEEDS <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">71</span><span class="token punctuation">,</span> <span class="token number">91</span><span class="token punctuation">,</span> <span class="token number">134</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 位数组。数组中的元素只能是 0 或者 1     */</span>    <span class="token keyword">private</span> BitSet bits <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BitSet</span><span class="token punctuation">(</span>DEFAULT_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 存放包含 hash 函数的类的数组     */</span>    <span class="token keyword">private</span> SimpleHash<span class="token punctuation">[</span><span class="token punctuation">]</span> func <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleHash</span><span class="token punctuation">[</span>SEEDS<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 初始化多个包含 hash 函数的类的数组，每个类中的 hash 函数都不一样     */</span>    <span class="token keyword">public</span> <span class="token function">MyBloomFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 初始化多个不同的 Hash 函数</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> SEEDS<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            func<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleHash</span><span class="token punctuation">(</span>DEFAULT_SIZE<span class="token punctuation">,</span> SEEDS<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 添加元素到位数组     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>Object value<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>SimpleHash f <span class="token operator">:</span> func<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            bits<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 判断指定元素是否存在于位数组     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span>Object value<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> ret <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>SimpleHash f <span class="token operator">:</span> func<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            ret <span class="token operator">=</span> ret <span class="token operator">&amp;&amp;</span> bits<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 静态内部类。用于 hash 操作！     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SimpleHash</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> cap<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> seed<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">SimpleHash</span><span class="token punctuation">(</span><span class="token keyword">int</span> cap<span class="token punctuation">,</span> <span class="token keyword">int</span> seed<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>cap <span class="token operator">=</span> cap<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>seed <span class="token operator">=</span> seed<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 计算 hash 值         */</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span>Object value<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> h<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>seed <span class="token operator">*</span> <span class="token punctuation">(</span>cap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>h <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">>>></span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>测试：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> top<span class="token punctuation">.</span>zysite<span class="token punctuation">.</span>bloom<span class="token punctuation">.</span>filter<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>hash<span class="token punctuation">.</span>BloomFilter<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>hash<span class="token punctuation">.</span>Funnels<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 布隆过滤器测试类 * * @author Leo * @create 2020/12/25 15:15 **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBloomFilterTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 测试自己实现的布隆过滤器     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testMyBloomFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建布隆过滤器对象</span>        MyBloomFilter myBloomFilter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyBloomFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String str1 <span class="token operator">=</span> <span class="token string">"MyBloomFilterTest"</span><span class="token punctuation">;</span>        String str2 <span class="token operator">=</span> <span class="token string">"testMyBloomFilter"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myBloomFilter<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myBloomFilter<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将元素放入布隆过滤器</span>        myBloomFilter<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>        myBloomFilter<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myBloomFilter<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myBloomFilter<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 测试 Guava 提供的布隆过滤器     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGuavaBloomFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建布隆过滤器对象</span>        BloomFilter<span class="token operator">&lt;</span>Integer<span class="token operator">></span> filter <span class="token operator">=</span> BloomFilter<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>                Funnels<span class="token punctuation">.</span><span class="token function">integerFunnel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token number">1500</span><span class="token punctuation">,</span>                <span class="token number">0.01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断指定元素是否存在</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>filter<span class="token punctuation">.</span><span class="token function">mightContain</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>filter<span class="token punctuation">.</span><span class="token function">mightContain</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将元素添加进布隆过滤器</span>        filter<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filter<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>filter<span class="token punctuation">.</span><span class="token function">mightContain</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>filter<span class="token punctuation">.</span><span class="token function">mightContain</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>使用 Guava 提供的实现需引入以下依赖：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.google.guava<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>guava<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>28.0-jre<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h2 id="Redis-中使用布隆过滤器"><a href="#Redis-中使用布隆过滤器" class="headerlink" title="Redis 中使用布隆过滤器"></a>Redis 中使用布隆过滤器</h2><p>Redis v4.0 之后有了 Module（模块/插件） 功能，Redis Modules 让 Redis 可以使用外部模块扩展其功能 。布隆过滤器就是其中的 Module。</p><p>官网推荐了一个 RedisBloom 作为 Redis 布隆过滤器的 Module 地址：<a href="https://github.com/RedisBloom/RedisBloom">https://github.com/RedisBloom/RedisBloom</a></p><p>根据项目的 Readme 可以快速入门。</p><p><a href="https://zysite.top/archives/bloom-filter#dQYaYHyj">布隆过滤器</a><a href="https://zysite.top/archives/bloom-filter#kRWeDAic">布隆过滤器原理</a><a href="https://zysite.top/archives/bloom-filter#AzkkGRKi">使用场景</a><a href="https://zysite.top/archives/bloom-filter#dNZrsbda">Java 实现布隆过滤器</a><a href="https://zysite.top/archives/bloom-filter#aFSKFXfC">Redis 中使用布隆过滤器</a></p><blockquote><p><strong>Copyright:</strong> 采用 <a href="https://creativecommons.org/licenses/by/4.0/">知识共享署名4.0</a> 国际许可协议进行许可</p><p><strong>Links:</strong> <a href="https://zysite.top/archives/bloom-filter">https://zysite.top/archives/bloom-filter</a></p></blockquote><p><a href="https://zysite.top/tags/algorithm"># Algorithm</a><a href="https://zysite.top/tags/redis"># Redis</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/092514.html"/>
      <url>/2021/092514.html</url>
      
        <content type="html"><![CDATA[<p>SpringBoot 整合 RabbitMQ</p><p><img src="https://zysite.top/upload/2021/04/logo-775ee8592a6b4875aa483a982c0be3c0.jpg" alt="img">70 次访问发布: 2021-06-08</p><p> <a href="https://zysite.top/categories/rabbitmq">· RabbitMQ</a></p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>RabbitMQ 如果使用 docker-compose 部署，可以参考我的这篇文章：<a href="https://zysite.top/archives/rabbitmq-docker-compose-install">docker-compose部署RabbitMQ（含管理页面）</a></p><h2 id="项目结构及依赖"><a href="#项目结构及依赖" class="headerlink" title="项目结构及依赖"></a>项目结构及依赖</h2><p>为了方便测试，创建一个项目结构如下：</p><p><img src="https://zys-img.oss-cn-beijing.aliyuncs.com/img/20210608104137.png" alt="rabbitmq项目结构"></p><p>主要依赖是 springboot 整合 amqp 的 starter。如下：（Junit 用于 provider 中测试发送消息）</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- rabbitmq --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.11.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- junit --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>在父工程里进行版本管理，生产者和消费者子工程里引入。</p><h2 id="配置、使用和测试"><a href="#配置、使用和测试" class="headerlink" title="配置、使用和测试"></a>配置、使用和测试</h2><h3 id="生产者（Provider）"><a href="#生产者（Provider）" class="headerlink" title="生产者（Provider）"></a>生产者（Provider）</h3><p>在生产者项目<code>rabbitmq-provider</code>中创建配置文件 application.yml，内容如下：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> rabbitmq<span class="token punctuation">-</span>provider  <span class="token comment" spellcheck="true">#rabbitmq配置</span>  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> rabbit    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span></code></pre><p>主要是配置 rabbitmq 服务器地址、端口、用户名和密码。</p><p>继续在该项目中创建配置类<code>RabbitmqProviderConfig</code>，内容如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Rabbitmq生产者配置类 * * @author Leo * @create 2021/6/8 10:03 **/</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitmqProviderConfig</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 创建一个 queue     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Queue <span class="token function">directQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"directQueue"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 创建一个 direct 类型的 exchange     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> DirectExchange <span class="token function">directExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span><span class="token string">"directExchange"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 绑定前面创建的 directQueue 和 directExchange ，指定 routing key 为 directRk     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Binding <span class="token function">directBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">directQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token function">directExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token string">"directRk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>主要是配置<code>queue（队列）</code>、<code>exchange（交换器）</code>、<code>bingding（交换器和队列的绑定关系）</code>。</p><p>我们可以通过 Junit 来测试发送消息，创建测试类<code>RabbitmqProviderTests</code>，内容如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author Leo * @create 2021/6/8 10:07 **/</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitmqProviderTests</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> RabbitTemplate rabbitTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String msg <span class="token operator">=</span> <span class="token string">"hello-first-rabbitmq-msg"</span><span class="token punctuation">;</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"directExchange"</span><span class="token punctuation">,</span> <span class="token string">"directRk"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>执行<code>testSend</code>方法发送一条消息，发送时除了消息体，还需指定 exchange 和 routing key。<code>convertAndSend</code>有很多重载方法，都可以自行尝试，这里就不演示了。</p><p>执行成功后到 <code>RabbitMQ Management</code>管理界面查看，可以看到红色箭头处分别表示<code>等待消费的消息数</code>和<code>总消息数</code>。</p><p><img src="https://zys-img.oss-cn-beijing.aliyuncs.com/img/20210608134552.png" alt="rabbitmq-first-msg"></p><p>可以在<code>Exchanges</code>选项卡里看到代码里创建的 <code>directExchange</code>。</p><p><img src="https://zys-img.oss-cn-beijing.aliyuncs.com/img/20210608134824.png" alt="rabbitmq-exchange"></p><p>以及<code>Queues</code>选项卡里的<code>directQueue</code>。</p><p><img src="https://zys-img.oss-cn-beijing.aliyuncs.com/img/20210608135226.png" alt="rabbitmq-queue"></p><h3 id="消费者（Consumer）"><a href="#消费者（Consumer）" class="headerlink" title="消费者（Consumer）"></a>消费者（Consumer）</h3><p>在消费者项目<code>rabbitmq-consumer</code>中创建配置文件 application.yml，内容如下：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> rabbitmq<span class="token punctuation">-</span>consumer  <span class="token comment" spellcheck="true">#rabbitmq配置</span>  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> rabbit    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span></code></pre><p>和生产者基本一致。</p><p>创建消息监听器<code>RabbitmqDirectReceiver</code>，用于接收消息，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * rabbitmq消费者 * * @author Leo * @create 2021/6/8 10:26 **/</span><span class="token comment" spellcheck="true">//指定监听队列</span><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"directQueue"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitmqDirectReceiver</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 处理消息     * @param msg     */</span>    <span class="token annotation punctuation">@RabbitHandler</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"RabbitmqDirectReceiver received msg: "</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>启动消费者项目，查看日志打印：</p><p><img src="https://zys-img.oss-cn-beijing.aliyuncs.com/img/20210608135943.png" alt="rabbitmq-consumer-first"></p><p>可以看到刚生产者发送的消息被消费了。</p><h3 id="多个消费者监听同一队列"><a href="#多个消费者监听同一队列" class="headerlink" title="多个消费者监听同一队列"></a>多个消费者监听同一队列</h3><p>当多个消费者监听同一队列时，是怎么消费的呢？先说结论，多个消费者会以轮询的方式消费消息。</p><p>再额外创建一个监听器<code>RabbitmqDirectReceiver2</code>，和上面的监听器监听同一队列。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author Leo * @create 2021/6/8 13:32 **/</span><span class="token comment" spellcheck="true">//和 RabbitmqDirectReceiver 监听同一个队列</span><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"directQueue"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitmqDirectReceiver2</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 处理消息     * @param msg     */</span>    <span class="token annotation punctuation">@RabbitHandler</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"RabbitmqDirectReceiver2 received msg: "</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>在生产者测试类中添加一个方法，向交换器<code>directExchange</code>发送 10 条消息：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> DateTimeFormatter dateTimeFormatter <span class="token operator">=</span> DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSend2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            String msg <span class="token operator">=</span> <span class="token string">"msg-"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span>  LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>dateTimeFormatter<span class="token punctuation">)</span><span class="token punctuation">;</span>            rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"directExchange"</span><span class="token punctuation">,</span> <span class="token string">"directRk"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>先启动消费者项目，然后执行测试方法<code>testSend2</code>。</p><p><img src="https://zys-img.oss-cn-beijing.aliyuncs.com/img/20210608141731.png" alt="rabbitmq-multiReceiver"></p><p>通过消费的日志可以看到两个消费者确实是以轮询的方式消费消息。</p><h3 id="其他交换器（Exchange）"><a href="#其他交换器（Exchange）" class="headerlink" title="其他交换器（Exchange）"></a>其他交换器（Exchange）</h3><p>前面的示例我们使用的是<code>direct</code>类型的 exchange，还有两个常用的：<code>fanout</code>、<code>topic</code>。</p><h4 id="fanout-exchange"><a href="#fanout-exchange" class="headerlink" title="fanout exchange"></a>fanout exchange</h4><p>在生产者配置类<code>RabbitmqProviderConfig</code>中添加以下代码：</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 创建两个队列：fanoutQueue1、fanoutQueue2     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Queue <span class="token function">fanoutQueue1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"fanoutQueue1"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Queue <span class="token function">fanoutQueue2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"fanoutQueue2"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 创建一个 fanout 类型的 exchange     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> FanoutExchange <span class="token function">fanoutExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FanoutExchange</span><span class="token punctuation">(</span><span class="token string">"fanoutExchange"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 将队列：fanoutQueue1、fanoutQueue2 绑定 交换器：fanoutExchange     * 这里不用配置 routing key，因为 fanout 类型的 exchange 在收到消息时会将消息发送所有与其绑定的队列里     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Binding <span class="token function">fanoutBinding1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">fanoutQueue1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token function">fanoutExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Binding <span class="token function">fanoutBinding2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">fanoutQueue2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token function">fanoutExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>创建 <code>fanout</code> 类型的 exchange，并且为其绑定了两个队列。</p><p>在生产者测试类<code>RabbitmqProviderTests</code>中添加以下测试方法：</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFanoutExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String fanoutMsg <span class="token operator">=</span> <span class="token string">"hello-fanout-exchange"</span><span class="token punctuation">;</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"fanoutExchange"</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> fanoutMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>在消费者项目中添加两个监听器，分别监听<code>fanoutQueue1</code>、<code>fanoutQueue2</code>：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author Leo * @create 2021/6/8 14:33 **/</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"fanoutQueue1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitmqFanoutReceiver</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@RabbitHandler</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"RabbitmqFanoutReceiver received msg: "</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author Leo * @create 2021/6/8 14:35 **/</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"fanoutQueue2"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitmqFanoutReceiver2</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@RabbitHandler</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"RabbitmqFanoutReceiver2 received msg: "</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>先执行上述测试方法，再启动消费者。</p><p><img src="https://zys-img.oss-cn-beijing.aliyuncs.com/img/20210608144056.png" alt="rabbitmq-fanout"></p><p>可以看到两个监听器都消费到了消息，说明消息确实发送到了两个队列中。</p><h4 id="topic-exchange"><a href="#topic-exchange" class="headerlink" title="topic exchange"></a>topic exchange</h4><p>在生产者配置类<code>RabbitmqProviderConfig</code>中添加以下代码：</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 创建两个队列：topicQueue1、topicQueue2     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Queue <span class="token function">topicQueue1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"topicQueue1"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Queue <span class="token function">topicQueue2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"topicQueue2"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 创建一个 topic 类型的 exchange     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> TopicExchange <span class="token function">topicExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TopicExchange</span><span class="token punctuation">(</span><span class="token string">"topicExchange"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 对于 topic 类型的 exchange，指定 routing key 时，有两个特殊通配符： # 匹配 0 个或多个单词，* 匹配一个单词。     * 单词用 . 隔开     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Binding <span class="token function">topicBinding1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//绑定 topicQueue1 和 topicExchange，指定 routing key 为 top.zysite.*</span>        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">topicQueue1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token function">topicExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token string">"top.zysite.*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Binding <span class="token function">topicBinding2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//绑定 topicQueue2 和 topicExchange，指定 routing key 为 top.#</span>        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">topicQueue2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token function">topicExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token string">"top.#"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>创建了<code>topic</code>类型的 exchange 并为其绑定了两个队列。指定 routing key 时使用了通配符。</p><p>在生产者测试类<code>RabbitmqProviderTests</code>中添加以下测试方法：</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testTopicExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String routingKey1 <span class="token operator">=</span> <span class="token string">"top.zysite.topic"</span><span class="token punctuation">;</span>        String topicMsg1 <span class="token operator">=</span> <span class="token string">"hello-topic-exchange1"</span><span class="token punctuation">;</span>                String routingKey2 <span class="token operator">=</span> <span class="token string">"top.baidu.topic"</span><span class="token punctuation">;</span>        String topicMsg2 <span class="token operator">=</span> <span class="token string">"hello-topic-exchange2"</span><span class="token punctuation">;</span>                String routingKey3 <span class="token operator">=</span> <span class="token string">"top.zysite.topic.test"</span><span class="token punctuation">;</span>        String topicMsg3 <span class="token operator">=</span> <span class="token string">"hello-topic-exchange3"</span><span class="token punctuation">;</span>                rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"topicExchange"</span><span class="token punctuation">,</span> routingKey1<span class="token punctuation">,</span> topicMsg1<span class="token punctuation">)</span><span class="token punctuation">;</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"topicExchange"</span><span class="token punctuation">,</span> routingKey2<span class="token punctuation">,</span> topicMsg2<span class="token punctuation">)</span><span class="token punctuation">;</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"topicExchange"</span><span class="token punctuation">,</span> routingKey3<span class="token punctuation">,</span> topicMsg3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>同样在消费者项目中添加两个监听器，分别监听<code>topicQueue1</code>、<code>topicQueue2</code>：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author Leo * @create 2021/6/8 15:04 **/</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"topicQueue1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitmqTopicReceiver</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@RabbitHandler</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"RabbitmqTopicReceiver received msg: "</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author Leo * @create 2021/6/8 15:05 **/</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"topicQueue2"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitmqTopicReceiver2</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@RabbitHandler</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"RabbitmqTopicReceiver2 received msg: "</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>先执行上述测试方法，再启动消费者。</p><p><img src="https://zys-img.oss-cn-beijing.aliyuncs.com/img/20210608151119.png" alt="rabbitmq-topic-consumer"></p><p>可以看到 <code>routing key</code>为 <code>top.zysite.topic</code>的消息被发送到了两个队列中，其它两个消息只被发送到<code>topicQueue2</code>中。说明绑定 queue 和 exchange 时，指定 routing key 的通配符起了作用。</p><h2 id="监听消息是否被正确路由"><a href="#监听消息是否被正确路由" class="headerlink" title="监听消息是否被正确路由"></a>监听消息是否被正确路由</h2><p>从前面的示例可以看出，如果我们指定了错误的 exchange 或 routing key，那么消息可能就无法正确地被发送到队列中，那么我们怎么指定生产者发送的消息有没有正确的路由到队列中呢？RabbitMQ 提供了相关的确认机制和回调。</p><p>修改生产者项目配置文件：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> rabbitmq<span class="token punctuation">-</span>provider  <span class="token comment" spellcheck="true">#rabbitmq配置</span>  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> rabbit    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>    <span class="token comment" spellcheck="true">#开启处理 rabbitmq 返回的消息</span>    <span class="token key atrule">publisher-returns</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre><p>在生产者项目中创建配置类<code>RabbitmqConfig</code>，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 配置 RabbitTemplate * * @author Leo * @create 2021/6/8 15:45 **/</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitmqConfig</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RabbitTemplate <span class="token function">rabbitTemplate</span><span class="token punctuation">(</span>ConnectionFactory connectionFactory<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        RabbitTemplate rabbitTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RabbitTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//mandatory 为 true 时，当消息无法路由到队列时，会将消息返还给消费者客户端（通过Basic.Return）</span>        <span class="token comment" spellcheck="true">//可以添加回调，接收并处理返回的消息</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">setMandatory</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加 rabbitmq 服务器返回的消息回调</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">setReturnsCallback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RabbitTemplate<span class="token punctuation">.</span>ReturnsCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">returnedMessage</span><span class="token punctuation">(</span>ReturnedMessage returned<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Received Returned Msg: "</span> <span class="token operator">+</span> returned<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> rabbitTemplate<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>在生产者测试类中添加以下方法：</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testReturnCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String msg <span class="token operator">=</span> <span class="token string">"returnMsg"</span><span class="token punctuation">;</span>        String routingKey <span class="token operator">=</span> <span class="token string">"com.baidu.topic"</span><span class="token punctuation">;</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"topicExchange"</span><span class="token punctuation">,</span> routingKey<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>我们知道，该 routing key 无法匹配绑定了 topicExchange 的 topicQueue1 和 topicQueue2 之中的任意一个。该消息会被 rabbiitmq 服务器返回给客户端。</p><p>执行该测试方法。</p><p><img src="https://zys-img.oss-cn-beijing.aliyuncs.com/img/20210608160855.png" alt="rabbitmq-returnMsg"></p><p>可以看到消息确实被返回给生产者客户端了。</p><h2 id="消费者手动确认消息"><a href="#消费者手动确认消息" class="headerlink" title="消费者手动确认消息"></a>消费者手动确认消息</h2><p>默认情况下 RabbitMQ 消费者消费消息时是自动确认的，可以通过配置的方式修改为手动提交确认（ack）。</p><p>在生产者项目配置类<code>RabbitmqProviderConfig</code>中添加以下配置：</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 创建一个 ackQueue ，并绑定到 ackExchange，指定 routing key 为 ackRk     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Queue <span class="token function">ackQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"ackQueue"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> DirectExchange <span class="token function">ackExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span><span class="token string">"ackExchange"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Binding <span class="token function">ackBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">ackQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token function">ackExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token string">"ackRk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>主要是创建一个 ackQueue ，并绑定到 ackExchange，指定 routing key 为 ackRk。</p><p>并在测试类中添加以下方法：</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testConsumerAck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String msg <span class="token operator">=</span> <span class="token string">"ackMsg"</span><span class="token punctuation">;</span>        String routingKey <span class="token operator">=</span> <span class="token string">"ackRk"</span><span class="token punctuation">;</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"ackExchange"</span><span class="token punctuation">,</span> routingKey<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>执行上述方法。</p><p>在消费者项目中创建配置类<code>RabbitmqConfig</code>，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author Leo * @create 2021/6/8 16:22 **/</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitmqConfig</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> SimpleMessageListenerContainer <span class="token function">simpleMessageListenerContainer</span><span class="token punctuation">(</span>ConnectionFactory connectionFactory<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        SimpleMessageListenerContainer simpleMessageListenerContainer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleMessageListenerContainer</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//改为手动提交确认（ack）</span>        simpleMessageListenerContainer<span class="token punctuation">.</span><span class="token function">setAcknowledgeMode</span><span class="token punctuation">(</span>AcknowledgeMode<span class="token punctuation">.</span>MANUAL<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//往该容器中添加队列</span>        simpleMessageListenerContainer<span class="token punctuation">.</span><span class="token function">setQueueNames</span><span class="token punctuation">(</span><span class="token string">"ackQueue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置消息监听回调，</span>        simpleMessageListenerContainer<span class="token punctuation">.</span><span class="token function">setMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelAwareMessageListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span>Message message<span class="token punctuation">,</span> Channel channel<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">long</span> deliveryTag <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"ChannelAwareMessageListener received msg : "</span> <span class="token operator">+</span> message<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//第2个参数为 是否开启 批量 ack，即提交 &lt;= 该 DeliveryTag 的所有消息的 ack</span>                    channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>deliveryTag<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//发生异常时，向 rabbitmq 服务器拒绝处理该消息, 第2个参数表示是否重新入队该消息</span>                    channel<span class="token punctuation">.</span><span class="token function">basicReject</span><span class="token punctuation">(</span>deliveryTag<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> simpleMessageListenerContainer<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>启动消费者项目。</p><p><img src="https://zys-img.oss-cn-beijing.aliyuncs.com/img/20210608165856.png" alt="rabbitmq-consumer-ack"></p><p>可以看到执行了我们配置的消息监听回调逻辑，如果出现异常的话会发送拒绝消息给 rabbitmq 服务器。</p><p>是提交 ack 还是拒绝都可以通过调用相应的方法来实现。</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>源码地址：<a href="https://github.com/leo1604270786/hello-rabbitmq">https://github.com/leo1604270786/hello-rabbitmq</a></p><p><a href="https://zysite.top/archives/springboot-rabbitmq#DAiWBssS">环境</a><a href="https://zysite.top/archives/springboot-rabbitmq#eNJeAjjQ">项目结构及依赖</a><a href="https://zysite.top/archives/springboot-rabbitmq#BeChsSPX">配置、使用和测试</a><a href="https://zysite.top/archives/springboot-rabbitmq#DcSrGyRB">监听消息是否被正确路由</a><a href="https://zysite.top/archives/springboot-rabbitmq#CZWawYZw">消费者手动确认消息</a><a href="https://zysite.top/archives/springboot-rabbitmq#RGBEbwKB">源码</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/092513.html"/>
      <url>/2021/092513.html</url>
      
        <content type="html"><![CDATA[<p>SpringBoot 整合 Kafka</p><p><img src="https://zysite.top/upload/2021/04/logo-775ee8592a6b4875aa483a982c0be3c0.jpg" alt="img">138 次访问发布: 2021-06-03</p><p> <a href="https://zysite.top/categories/kafka">· Kafka</a></p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>ZooKeeper、Kafka。</p><p>如果使用 docker-compose 部署 Kafka 集群，可以参考我的这篇文章 <a href="https://zysite.top/archives/kafka-docker-compose-install">docker-compose安装Kafka集群</a></p><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><p>pom.xml 依赖文件如下：springboot 版本是 2.3.0.RELEASE 。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- kafka --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.kafka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-kafka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.4.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- lombok --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- test --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>可以通过<code>Java类配置</code>和<code>配置文件配置</code>两种方式来配置 Kafka。</p><h3 id="Java-类配置"><a href="#Java-类配置" class="headerlink" title="Java 类配置"></a>Java 类配置</h3><h4 id="配置主题（KafkaAdmin）"><a href="#配置主题（KafkaAdmin）" class="headerlink" title="配置主题（KafkaAdmin）"></a>配置主题（KafkaAdmin）</h4><p>创建配置类 <code>KafkaTopicConfiguration</code> 代码如下：该配置可选，通常会事先通过 Kafka 提供的脚本创建主题。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * kafka 主题配置类 * * @author Leo * @create 2020/12/31 15:57 **/</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KafkaTopicConfiguration</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 创建 KafkaAmin，可以自动检测集群中是否存在topic，不存在则创建     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> KafkaAdmin <span class="token function">kafkaAdmin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>AdminClientConfig<span class="token punctuation">.</span>BOOTSTRAP_SERVERS_CONFIG<span class="token punctuation">,</span> <span class="token string">"127.0.0.1:9092,127.0.0.1:9093,127.0.0.1:9094"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">KafkaAdmin</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> NewTopic <span class="token function">newTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建 topic，指定 名称、分区数、副本数</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">NewTopic</span><span class="token punctuation">(</span><span class="token string">"hello-kafka-test-topic"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="配置生产者"><a href="#配置生产者" class="headerlink" title="配置生产者"></a>配置生产者</h3><p>创建配置类<code>KafkaProducerConfiguration</code> 代码如下：里面涉及基本配置和<code>自定义分区器、拦截器、事务</code>等配置。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * kafka 生产者配置类 * * @author Leo * @create 2020/12/31 15:09 **/</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KafkaProducerConfiguration</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 不包含事务 producerFactory     * @return     */</span>    <span class="token keyword">public</span> ProducerFactory<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> <span class="token function">producerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//kafka 集群地址</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span>BOOTSTRAP_SERVERS_CONFIG<span class="token punctuation">,</span> <span class="token string">"127.0.0.1:9092,127.0.0.1:9093,127.0.0.1:9094"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//重试次数</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span>RETRIES_CONFIG<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//应答级别</span>        <span class="token comment" spellcheck="true">//acks=0 把消息发送到kafka就认为发送成功</span>        <span class="token comment" spellcheck="true">//acks=1 把消息发送到kafka leader分区，并且写入磁盘就认为发送成功</span>        <span class="token comment" spellcheck="true">//acks=all 把消息发送到kafka leader分区，并且leader分区的副本follower对消息进行了同步就任务发送成功</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span>ACKS_CONFIG<span class="token punctuation">,</span> <span class="token string">"all"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//KafkaProducer.send() 和 partitionsFor() 方法的最长阻塞时间 单位 ms</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span>MAX_BLOCK_MS_CONFIG<span class="token punctuation">,</span> <span class="token number">6000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//批量处理的最大大小 单位 byte</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span>BATCH_SIZE_CONFIG<span class="token punctuation">,</span> <span class="token number">4096</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//发送延时,当生产端积累的消息达到batch-size或接收到消息linger.ms后,生产者就会将消息提交给kafka</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span>LINGER_MS_CONFIG<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//生产者可用缓冲区的最大值 单位 byte</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span>BUFFER_MEMORY_CONFIG<span class="token punctuation">,</span> <span class="token number">33554432</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//每条消息最大的大小</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span>MAX_REQUEST_SIZE_CONFIG<span class="token punctuation">,</span> <span class="token number">1048576</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//客户端ID</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span>CLIENT_ID_CONFIG<span class="token punctuation">,</span> <span class="token string">"hello-kafka"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Key 序列化方式</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span>KEY_SERIALIZER_CLASS_CONFIG<span class="token punctuation">,</span> StringSerializer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Value 序列化方式</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span>VALUE_SERIALIZER_CLASS_CONFIG<span class="token punctuation">,</span> StringSerializer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//消息压缩：none、lz4、gzip、snappy，默认为 none。</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span>COMPRESSION_TYPE_CONFIG<span class="token punctuation">,</span> <span class="token string">"gzip"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//自定义分区器</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span>PARTITIONER_CLASS_CONFIG<span class="token punctuation">,</span> MyPartitioner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultKafkaProducerFactory</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 包含事务 producerFactory     * @return     */</span>    <span class="token keyword">public</span> ProducerFactory<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> <span class="token function">producerFactoryWithTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        DefaultKafkaProducerFactory<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> defaultKafkaProducerFactory <span class="token operator">=</span> <span class="token punctuation">(</span>DefaultKafkaProducerFactory<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">)</span> <span class="token function">producerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置事务Id前缀</span>        defaultKafkaProducerFactory<span class="token punctuation">.</span><span class="token function">setTransactionIdPrefix</span><span class="token punctuation">(</span><span class="token string">"tx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> defaultKafkaProducerFactory<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 不包含事务 kafkaTemplate     * @return     */</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"kafkaTemplate"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> KafkaTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> <span class="token function">kafkaTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">KafkaTemplate</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token function">producerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 包含事务 kafkaTemplate     * @return     */</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"kafkaTemplateWithTransaction"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> KafkaTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> <span class="token function">kafkaTemplateWithTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">KafkaTemplate</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token function">producerFactoryWithTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 以该方式配置事务管理器：就不能以普通方式发送消息，只能通过 kafkaTemplate.executeInTransaction 或     * 在方法上加 @Transactional 注解来发送消息，否则报错     * @param producerFactory     * @return     */</span><span class="token comment" spellcheck="true">//    @Bean</span><span class="token comment" spellcheck="true">//    public KafkaTransactionManager&lt;Integer, String> kafkaTransactionManager(ProducerFactory&lt;Integer, String> producerFactory) &amp;#123;</span><span class="token comment" spellcheck="true">//        return new KafkaTransactionManager&lt;>(producerFactory);</span><span class="token comment" spellcheck="true">//    &amp;#125;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="配置消费者"><a href="#配置消费者" class="headerlink" title="配置消费者"></a>配置消费者</h3><p>创建配置类<code>KafkaConsumerConfiguration</code>代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * kafka 消费者配置类 * * @author Leo * @create 2020/12/31 15:09 **/</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KafkaConsumerConfiguration</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> KafkaListenerContainerFactory<span class="token operator">&lt;</span>ConcurrentMessageListenerContainer<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">>></span> <span class="token function">kafkaListenerContainerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ConcurrentKafkaListenerContainerFactory<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentKafkaListenerContainerFactory</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置 consumerFactory</span>        factory<span class="token punctuation">.</span><span class="token function">setConsumerFactory</span><span class="token punctuation">(</span><span class="token function">consumerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置是否开启批量监听</span>        factory<span class="token punctuation">.</span><span class="token function">setBatchListener</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置消费者组中的线程数量</span>        factory<span class="token punctuation">.</span><span class="token function">setConcurrency</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> factory<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * consumerFactory     * @return     */</span>    <span class="token keyword">public</span> ConsumerFactory<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">consumerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//kafka集群地址</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ConsumerConfig<span class="token punctuation">.</span>BOOTSTRAP_SERVERS_CONFIG<span class="token punctuation">,</span> <span class="token string">"127.0.0.1:9092,127.0.0.1:9093,127.0.0.1:9094"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//自动提交 offset 默认 true</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ConsumerConfig<span class="token punctuation">.</span>ENABLE_AUTO_COMMIT_CONFIG<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//自动提交的频率 单位 ms</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ConsumerConfig<span class="token punctuation">.</span>AUTO_COMMIT_INTERVAL_MS_CONFIG<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//批量消费最大数量</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ConsumerConfig<span class="token punctuation">.</span>MAX_POLL_RECORDS_CONFIG<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//消费者组</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ConsumerConfig<span class="token punctuation">.</span>GROUP_ID_CONFIG<span class="token punctuation">,</span> <span class="token string">"testGroup"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//session超时，超过这个时间consumer没有发送心跳,就会触发rebalance操作</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ConsumerConfig<span class="token punctuation">.</span>SESSION_TIMEOUT_MS_CONFIG<span class="token punctuation">,</span> <span class="token number">120000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//请求超时</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ConsumerConfig<span class="token punctuation">.</span>REQUEST_TIMEOUT_MS_CONFIG<span class="token punctuation">,</span> <span class="token number">120000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Key 反序列化类</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ConsumerConfig<span class="token punctuation">.</span>KEY_DESERIALIZER_CLASS_CONFIG<span class="token punctuation">,</span> StringDeserializer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Value 反序列化类</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ConsumerConfig<span class="token punctuation">.</span>VALUE_DESERIALIZER_CLASS_CONFIG<span class="token punctuation">,</span> StringDeserializer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//当kafka中没有初始offset或offset超出范围时将自动重置offset</span>        <span class="token comment" spellcheck="true">//earliest:重置为分区中最小的offset</span>        <span class="token comment" spellcheck="true">//latest:重置为分区中最新的offset(消费分区中新产生的数据)</span>        <span class="token comment" spellcheck="true">//none:只要有一个分区不存在已提交的offset,就抛出异常</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ConsumerConfig<span class="token punctuation">.</span>AUTO_OFFSET_RESET_CONFIG<span class="token punctuation">,</span> <span class="token string">"latest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置Consumer拦截器</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ConsumerConfig<span class="token punctuation">.</span>INTERCEPTOR_CLASSES_CONFIG<span class="token punctuation">,</span> MyConsumerInterceptor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultKafkaConsumerFactory</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 消费异常处理器     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ConsumerAwareListenerErrorHandler <span class="token function">consumerAwareListenerErrorHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConsumerAwareListenerErrorHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Object <span class="token function">handleError</span><span class="token punctuation">(</span>Message<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> message<span class="token punctuation">,</span> ListenerExecutionFailedException exception<span class="token punctuation">,</span> Consumer<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">></span> consumer<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//打印消费异常的消息和异常信息</span>                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"consumer failed! message: &amp;#123;&amp;#125;, exceptionMsg: &amp;#123;&amp;#125;, groupId: &amp;#123;&amp;#125;"</span><span class="token punctuation">,</span> message<span class="token punctuation">,</span> exception<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> exception<span class="token punctuation">.</span><span class="token function">getGroupId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="配置文件配置"><a href="#配置文件配置" class="headerlink" title="配置文件配置"></a>配置文件配置</h3><p>以配置文件的方式来进行配置的话，所有配置都在<code>application.yml</code>中，配置内容如下：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> hello<span class="token punctuation">-</span>kafka  <span class="token key atrule">kafka</span><span class="token punctuation">:</span>    <span class="token key atrule">listener</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true">#设置是否批量消费，默认 single（单条），batch（批量）</span>      <span class="token key atrule">type</span><span class="token punctuation">:</span> single    <span class="token comment" spellcheck="true"># 集群地址</span>    <span class="token key atrule">bootstrap-servers</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">9092</span><span class="token punctuation">,</span>127.0.0.1<span class="token punctuation">:</span><span class="token number">9093</span><span class="token punctuation">,</span>127.0.0.1<span class="token punctuation">:</span><span class="token number">9094</span>    <span class="token comment" spellcheck="true"># 生产者配置</span>    <span class="token key atrule">producer</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 重试次数</span>      <span class="token key atrule">retries</span><span class="token punctuation">:</span> <span class="token number">3</span>      <span class="token comment" spellcheck="true"># 应答级别</span>      <span class="token comment" spellcheck="true"># acks=0 把消息发送到kafka就认为发送成功</span>      <span class="token comment" spellcheck="true"># acks=1 把消息发送到kafka leader分区，并且写入磁盘就认为发送成功</span>      <span class="token comment" spellcheck="true"># acks=all 把消息发送到kafka leader分区，并且leader分区的副本follower对消息进行了同步就任务发送成功</span>      <span class="token key atrule">acks</span><span class="token punctuation">:</span> all      <span class="token comment" spellcheck="true"># 批量处理的最大大小 单位 byte</span>      <span class="token key atrule">batch-size</span><span class="token punctuation">:</span> <span class="token number">4096</span>      <span class="token comment" spellcheck="true"># 发送延时,当生产端积累的消息达到batch-size或接收到消息linger.ms后,生产者就会将消息提交给kafka</span>      <span class="token key atrule">buffer-memory</span><span class="token punctuation">:</span> <span class="token number">33554432</span>      <span class="token comment" spellcheck="true"># 客户端ID</span>      <span class="token key atrule">client-id</span><span class="token punctuation">:</span> hello<span class="token punctuation">-</span>kafka      <span class="token comment" spellcheck="true"># Key 序列化类</span>      <span class="token key atrule">key-serializer</span><span class="token punctuation">:</span> org.apache.kafka.common.serialization.StringSerializer      <span class="token comment" spellcheck="true"># Value 序列化类</span>      <span class="token key atrule">value-serializer</span><span class="token punctuation">:</span> org.apache.kafka.common.serialization.StringSerializer      <span class="token comment" spellcheck="true"># 消息压缩：none、lz4、gzip、snappy，默认为 none。</span>      <span class="token key atrule">compression-type</span><span class="token punctuation">:</span> gzip      <span class="token key atrule">properties</span><span class="token punctuation">:</span>        <span class="token key atrule">partitioner</span><span class="token punctuation">:</span>          <span class="token comment" spellcheck="true">#指定自定义分区器</span>          <span class="token key atrule">class</span><span class="token punctuation">:</span> top.zysite.hello.kafka.partitioner.MyPartitioner        <span class="token key atrule">linger</span><span class="token punctuation">:</span>          <span class="token comment" spellcheck="true"># 发送延时,当生产端积累的消息达到batch-size或接收到消息linger.ms后,生产者就会将消息提交给kafka</span>          <span class="token key atrule">ms</span><span class="token punctuation">:</span> <span class="token number">1000</span>        <span class="token key atrule">max</span><span class="token punctuation">:</span>          <span class="token key atrule">block</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># KafkaProducer.send() 和 partitionsFor() 方法的最长阻塞时间 单位 ms</span>            <span class="token key atrule">ms</span><span class="token punctuation">:</span> <span class="token number">6000</span>    <span class="token comment" spellcheck="true"># 消费者配置</span>    <span class="token key atrule">consumer</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 默认消费者组</span>      <span class="token key atrule">group-id</span><span class="token punctuation">:</span> testGroup      <span class="token comment" spellcheck="true"># 自动提交 offset 默认 true</span>      <span class="token key atrule">enable-auto-commit</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>      <span class="token comment" spellcheck="true"># 自动提交的频率 单位 ms</span>      <span class="token key atrule">auto-commit-interval</span><span class="token punctuation">:</span> <span class="token number">1000</span>      <span class="token comment" spellcheck="true"># 批量消费最大数量</span>      <span class="token key atrule">max-poll-records</span><span class="token punctuation">:</span> <span class="token number">100</span>      <span class="token comment" spellcheck="true"># Key 反序列化类</span>      <span class="token key atrule">key-deserializer</span><span class="token punctuation">:</span> org.apache.kafka.common.serialization.StringDeserializer      <span class="token comment" spellcheck="true"># Value 反序列化类</span>      <span class="token key atrule">value-deserializer</span><span class="token punctuation">:</span> org.apache.kafka.common.serialization.StringDeserializer      <span class="token comment" spellcheck="true"># 当kafka中没有初始offset或offset超出范围时将自动重置offset</span>      <span class="token comment" spellcheck="true"># earliest:重置为分区中最小的offset</span>      <span class="token comment" spellcheck="true"># latest:重置为分区中最新的offset(消费分区中新产生的数据)</span>      <span class="token comment" spellcheck="true"># none:只要有一个分区不存在已提交的offset,就抛出异常</span>      <span class="token key atrule">auto-offset-reset</span><span class="token punctuation">:</span> latest      <span class="token key atrule">properties</span><span class="token punctuation">:</span>        <span class="token key atrule">interceptor</span><span class="token punctuation">:</span>          <span class="token key atrule">classes</span><span class="token punctuation">:</span> top.zysite.hello.kafka.interceptor.MyConsumerInterceptor        <span class="token key atrule">session</span><span class="token punctuation">:</span>          <span class="token key atrule">timeout</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># session超时，超过这个时间consumer没有发送心跳,就会触发rebalance操作</span>            <span class="token key atrule">ms</span><span class="token punctuation">:</span> <span class="token number">120000</span>        <span class="token key atrule">request</span><span class="token punctuation">:</span>          <span class="token key atrule">timeout</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 请求超时</span>            <span class="token key atrule">ms</span><span class="token punctuation">:</span> <span class="token number">120000</span></code></pre><p>这里采用<code>Java类配置</code>。在 SpringBoot 启动类上添加注解<code>@EnableKafka</code>启用<code>KafkaTemplate</code>：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableKafka</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloKafkaApplication</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>HelloKafkaApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="自定义分区器"><a href="#自定义分区器" class="headerlink" title="自定义分区器"></a>自定义分区器</h3><p>可以看到上述配置包含自定义分区器的配置，自定义分区器需实现<code>Partitioner</code>接口并在生产者端进行配置，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 自定义分区器 * * @author Leo * @create 2021/5/26 13:40 **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyPartitioner</span> <span class="token keyword">implements</span> <span class="token class-name">Partitioner</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 分区策略核心方法     * @param topic     * @param key     * @param keyBytes     * @param value     * @param valueBytes     * @param cluster     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span>String topic<span class="token punctuation">,</span> Object key<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> keyBytes<span class="token punctuation">,</span> Object value<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> valueBytes<span class="token punctuation">,</span> Cluster cluster<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//具体分区逻辑，这里全部发送到0号分区</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">></span> configs<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>配置了之后所有的消息都会发送到 0 号分区。（这里只是为了演示）</p><h3 id="消费者拦截器"><a href="#消费者拦截器" class="headerlink" title="消费者拦截器"></a>消费者拦截器</h3><p>可以看到上述配置也包含了消费者拦截器的配置，消费者拦截器需实现<code>ConsumerInterceptor</code>接口，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 消费者拦截器 * * @author Leo * @create 2021/5/27 16:30 **/</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConsumerInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">ConsumerInterceptor</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * KafkaConsumer 会在 poll 方法返回之前调用该方法，可以在该方法中对消息进行过滤     * @param records     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ConsumerRecords<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> <span class="token function">onConsume</span><span class="token punctuation">(</span>ConsumerRecords<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> records<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"********** before interceptor: "</span> <span class="token operator">+</span> records<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"**********"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>TopicPartition<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>ConsumerRecord<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">>>></span> newRecords <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历每个topic、partition</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>TopicPartition topicPartition <span class="token operator">:</span> records<span class="token punctuation">.</span><span class="token function">partitions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取特定topic、partition下的消息列表</span>            List<span class="token operator">&lt;</span>ConsumerRecord<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">>></span> recordList <span class="token operator">=</span> records<span class="token punctuation">.</span><span class="token function">records</span><span class="token punctuation">(</span>topicPartition<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//过滤</span>            List<span class="token operator">&lt;</span>ConsumerRecord<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">>></span> filteredList <span class="token operator">=</span> recordList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>record <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">!</span>record<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"filter"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//放入新的消息记录里</span>            newRecords<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>topicPartition<span class="token punctuation">,</span> filteredList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        ConsumerRecords<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> filteredRecords <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConsumerRecords</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>newRecords<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"********** after interceptor: "</span> <span class="token operator">+</span> filteredRecords<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"**********"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回过滤后的消息记录</span>        <span class="token keyword">return</span> filteredRecords<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 提交完offset之后调用该方法     * @param offsets     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCommit</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>TopicPartition<span class="token punctuation">,</span> OffsetAndMetadata<span class="token operator">></span> offsets<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>offsets<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            offsets<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>topicPartition<span class="token punctuation">,</span> offsetAndMetadata<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"partition : "</span> <span class="token operator">+</span> topicPartition <span class="token operator">+</span> <span class="token string">", offset : "</span> <span class="token operator">+</span> offsetAndMetadata<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">></span> configs<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>有消费者拦截器，自然也有生产者拦截器，只需要实现<code>ProducerInterceptor</code>接口并在生产者端进行配置即可，这里只演示消费者拦截器。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>为了方便看到效果，这里统一测试生产者和消费者。</p><h3 id="创建生产者服务类"><a href="#创建生产者服务类" class="headerlink" title="创建生产者服务类"></a>创建生产者服务类</h3><p>创建生产消息服务类<code>KafkaProducerService</code>代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * kafka 生产服务 * * @author Leo * @create 2020/12/31 16:06 **/</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KafkaProducerService</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"kafkaTemplate"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> KafkaTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> kafkaTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"kafkaTemplateWithTransaction"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> KafkaTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> kafkaTemplateWithTransaction<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 发送消息（同步）     * @param topic 主题     * @param key 键     * @param message 值     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessageSync</span><span class="token punctuation">(</span>String topic<span class="token punctuation">,</span> String key<span class="token punctuation">,</span> String message<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">,</span> ExecutionException<span class="token punctuation">,</span> TimeoutException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//可以指定最长等待时间，也可以不指定</span>        kafkaTemplate<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"sendMessageSync => topic: &amp;#123;&amp;#125;, key: &amp;#123;&amp;#125;, message: &amp;#123;&amp;#125;"</span><span class="token punctuation">,</span> topic<span class="token punctuation">,</span> key<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定key，kafka根据key进行hash，决定存入哪个partition</span><span class="token comment" spellcheck="true">//        kafkaTemplate.send(topic, key, message).get(10, TimeUnit.SECONDS);</span>        <span class="token comment" spellcheck="true">//存入指定partition</span><span class="token comment" spellcheck="true">//        kafkaTemplate.send(topic, 0, key, message).get(10, TimeUnit.SECONDS);</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 发送消息并获取结果     * @param topic     * @param message     * @throws ExecutionException     * @throws InterruptedException     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessageGetResult</span><span class="token punctuation">(</span>String topic<span class="token punctuation">,</span> String key<span class="token punctuation">,</span> String message<span class="token punctuation">)</span> <span class="token keyword">throws</span> ExecutionException<span class="token punctuation">,</span> InterruptedException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        SendResult<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> result <span class="token operator">=</span> kafkaTemplate<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"sendMessageSync => topic: &amp;#123;&amp;#125;, key: &amp;#123;&amp;#125;, message: &amp;#123;&amp;#125;"</span><span class="token punctuation">,</span> topic<span class="token punctuation">,</span> key<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"The partition the message was sent to: "</span> <span class="token operator">+</span> result<span class="token punctuation">.</span><span class="token function">getRecordMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 发送消息（异步）     * @param topic 主题     * @param message 消息内容     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessageAsync</span><span class="token punctuation">(</span>String topic<span class="token punctuation">,</span> String message<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ListenableFuture<span class="token operator">&lt;</span>SendResult<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">>></span> future <span class="token operator">=</span> kafkaTemplate<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加回调</span>        future<span class="token punctuation">.</span><span class="token function">addCallback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ListenableFutureCallback</span><span class="token operator">&lt;</span>SendResult<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFailure</span><span class="token punctuation">(</span>Throwable throwable<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"sendMessageAsync failure! topic : &amp;#123;&amp;#125;, message: &amp;#123;&amp;#125;"</span><span class="token punctuation">,</span> topic<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span>SendResult<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> stringStringSendResult<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"sendMessageAsync success! topic: &amp;#123;&amp;#125;, message: &amp;#123;&amp;#125;"</span><span class="token punctuation">,</span> topic<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 可以将消息组装成 Message 对象和 ProducerRecord 对象发送     * @param topic     * @param key     * @param message     * @throws InterruptedException     * @throws ExecutionException     * @throws TimeoutException     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testMessageBuilder</span><span class="token punctuation">(</span>String topic<span class="token punctuation">,</span> String key<span class="token punctuation">,</span> String message<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">,</span> ExecutionException<span class="token punctuation">,</span> TimeoutException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 组装消息</span>        Message msg <span class="token operator">=</span> MessageBuilder<span class="token punctuation">.</span><span class="token function">withPayload</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span>KafkaHeaders<span class="token punctuation">.</span>MESSAGE_KEY<span class="token punctuation">,</span> key<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span>KafkaHeaders<span class="token punctuation">.</span>TOPIC<span class="token punctuation">,</span> topic<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span>KafkaHeaders<span class="token punctuation">.</span>PREFIX<span class="token punctuation">,</span><span class="token string">"kafka_"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//同步发送</span>        kafkaTemplate<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 组装消息</span><span class="token comment" spellcheck="true">//        ProducerRecord&lt;String, String> producerRecord = new ProducerRecord&lt;>(topic, message);</span><span class="token comment" spellcheck="true">//        kafkaTemplate.send(producerRecord).get(10, TimeUnit.SECONDS);</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 以事务方式发送消息     * @param topic     * @param key     * @param message     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessageInTransaction</span><span class="token punctuation">(</span>String topic<span class="token punctuation">,</span> String key<span class="token punctuation">,</span> String message<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        kafkaTemplateWithTransaction<span class="token punctuation">.</span><span class="token function">executeInTransaction</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">KafkaOperations<span class="token punctuation">.</span>OperationsCallback</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Object <span class="token function">doInOperations</span><span class="token punctuation">(</span>KafkaOperations<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> kafkaOperations<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                kafkaOperations<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> key<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//出现异常将会中断事务，消息不会发送出去</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"exception"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="创建消费者服务类"><a href="#创建消费者服务类" class="headerlink" title="创建消费者服务类"></a>创建消费者服务类</h3><p>创建消费消息服务类<code>KafkaConsumerService</code>代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * kafka 消费服务 * * @author Leo * @create 2020/12/31 16:06 **/</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KafkaConsumerService</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 消费单条消息,topics 可以监听多个topic，如：topics = &amp;#123;"topic1", "topic2"&amp;#125;     * @param message 消息     */</span>    <span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string">"consumerSingle"</span><span class="token punctuation">,</span> topics <span class="token operator">=</span> <span class="token string">"hello-kafka-test-topic"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">consumerSingle</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"consumerSingle ====> message: &amp;#123;&amp;#125;"</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*    @KafkaListener(id = "consumerBatch", topicPartitions = &amp;#123;            @TopicPartition(topic = "hello-batch1", partitions = "0"),            @TopicPartition(topic = "hello-batch2", partitionOffsets = @PartitionOffset(partition = "2", initialOffset = "4"))    &amp;#125;)*/</span>    <span class="token comment" spellcheck="true">/**     * 批量消费消息     * @param messages     */</span>    <span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string">"consumerBatch"</span><span class="token punctuation">,</span> topics <span class="token operator">=</span> <span class="token string">"hello-batch"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">consumerBatch</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>ConsumerRecord<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">>></span> messages<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"consumerBatch =====> messageSize: &amp;#123;&amp;#125;"</span><span class="token punctuation">,</span> messages<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>messages<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 指定消费异常处理器     * @param message     */</span>    <span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string">"consumerException"</span><span class="token punctuation">,</span> topics <span class="token operator">=</span> <span class="token string">"hello-kafka-test-topic"</span><span class="token punctuation">,</span> errorHandler <span class="token operator">=</span> <span class="token string">"consumerAwareListenerErrorHandler"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">consumerException</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"consumer exception"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 验证ConsumerInterceptor     * @param message     */</span>    <span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string">"interceptor"</span><span class="token punctuation">,</span> topics <span class="token operator">=</span> <span class="token string">"consumer-interceptor"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">consumerInterceptor</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"consumerInterceptor ====> message: &amp;#123;&amp;#125;"</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="创建-Junit-测试类"><a href="#创建-Junit-测试类" class="headerlink" title="创建 Junit 测试类"></a>创建 Junit 测试类</h3><p>使用 Junit 整合 SpringBoot 来测试：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">HelloKafkaApplicationTests</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> KafkaProducerService kafkaProducerService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">testSendMessageSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String topic <span class="token operator">=</span> <span class="token string">"hello-kafka-test-topic"</span><span class="token punctuation">;</span>        String key <span class="token operator">=</span> <span class="token string">"key1"</span><span class="token punctuation">;</span>        String message <span class="token operator">=</span> <span class="token string">"firstMessage"</span><span class="token punctuation">;</span>        kafkaProducerService<span class="token punctuation">.</span><span class="token function">sendMessageSync</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> key<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSendMessageGetResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String topic <span class="token operator">=</span> <span class="token string">"hello-kafka-test-topic"</span><span class="token punctuation">;</span>        String key <span class="token operator">=</span> <span class="token string">"key"</span><span class="token punctuation">;</span>        String message <span class="token operator">=</span> <span class="token string">"helloSendMessageGetResult"</span><span class="token punctuation">;</span>        kafkaProducerService<span class="token punctuation">.</span><span class="token function">sendMessageGetResult</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> key<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>        kafkaProducerService<span class="token punctuation">.</span><span class="token function">sendMessageGetResult</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> null<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSendMessageAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String topic <span class="token operator">=</span> <span class="token string">"hello-kafka-test-topic"</span><span class="token punctuation">;</span>        String message <span class="token operator">=</span> <span class="token string">"firstAsyncMessage"</span><span class="token punctuation">;</span>        kafkaProducerService<span class="token punctuation">.</span><span class="token function">sendMessageAsync</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testMessageBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String topic <span class="token operator">=</span> <span class="token string">"hello-kafka-test-topic"</span><span class="token punctuation">;</span>        String key <span class="token operator">=</span> <span class="token string">"key1"</span><span class="token punctuation">;</span>        String message <span class="token operator">=</span> <span class="token string">"helloMessageBuilder"</span><span class="token punctuation">;</span>        kafkaProducerService<span class="token punctuation">.</span><span class="token function">testMessageBuilder</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> key<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 测试事务     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSendMessageInTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String topic <span class="token operator">=</span> <span class="token string">"hello-kafka-test-topic"</span><span class="token punctuation">;</span>        String key <span class="token operator">=</span> <span class="token string">"key1"</span><span class="token punctuation">;</span>        String message <span class="token operator">=</span> <span class="token string">"helloSendMessageInTransaction"</span><span class="token punctuation">;</span>        kafkaProducerService<span class="token punctuation">.</span><span class="token function">sendMessageInTransaction</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> key<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 测试批量消费     * @throws Exception     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testConsumerBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//写入多条数据到批量topic：hello-batch</span>        String topic <span class="token operator">=</span> <span class="token string">"hello-batch"</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            kafkaProducerService<span class="token punctuation">.</span><span class="token function">sendMessageSync</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token string">"batchMessage"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 测试消费者拦截器     * @throws Exception     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testConsumerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String topic <span class="token operator">=</span> <span class="token string">"consumer-interceptor"</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            kafkaProducerService<span class="token punctuation">.</span><span class="token function">sendMessageSync</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span>null<span class="token punctuation">,</span> <span class="token string">"normalMessage"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        kafkaProducerService<span class="token punctuation">.</span><span class="token function">sendMessageSync</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token string">"filteredMessage"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        kafkaProducerService<span class="token punctuation">.</span><span class="token function">sendMessageSync</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token string">"filterMessage"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><p>先启动应用程序，然后依次执行 Junit 中的测试方法：</p><h4 id="同步发送消息"><a href="#同步发送消息" class="headerlink" title="同步发送消息"></a>同步发送消息</h4><p>执行方法<code>testSendMessageSync</code>，可以看到日志打印：</p><p><img src="https://zys-img.oss-cn-beijing.aliyuncs.com/img/20210603153446.png" alt="发送单条消息"></p><p>消费日志：</p><p><img src="https://zys-img.oss-cn-beijing.aliyuncs.com/img/20210603153528.png" alt="消费单条"></p><h3 id="发送消息并获取消息发往的分区"><a href="#发送消息并获取消息发往的分区" class="headerlink" title="发送消息并获取消息发往的分区"></a>发送消息并获取消息发往的分区</h3><p>执行方法<code>testSendMessageGetResult</code>，可以看到日志打印：</p><p><img src="https://zys-img.oss-cn-beijing.aliyuncs.com/img/20210603153634.png" alt="消费消息并获得发往分区编号"></p><p>由于配置了自定义分区器，可以看到消息都发往了 0 号分区，如果没有配置自定义分区器，并且主题包含多个分区的话，正常情况下多条消息不会全部发往同一分区。（可以自行测试）</p><h3 id="异步发送消息"><a href="#异步发送消息" class="headerlink" title="异步发送消息"></a>异步发送消息</h3><p>异步发送消息无法通过 Junit 来测试，因为 Junit 方法执行完就结束了，没法看到成功或失败的回调打印。（可以通过System.in.read来阻塞，或则 Thread.sleep）。这里就不演示了。</p><p>MessageBuilder 只是以不同的形式来组装消息，可以自行测试。</p><h3 id="以事务的形式发送消息"><a href="#以事务的形式发送消息" class="headerlink" title="以事务的形式发送消息"></a>以事务的形式发送消息</h3><p><code>KafkaTemplate</code>封装了方法<code>executeInTransaction</code>方法，可以让我们以事务的形式发送消息。</p><p>执行方法<code>testSendMessageInTransaction</code>，可以看到：</p><p><img src="https://zys-img.oss-cn-beijing.aliyuncs.com/img/20210603153725.png" alt="以事务的形式发送消息"></p><p>抛出了异常，通过异常说明和没有该消息的消费日志，可以证明该消息并没有发送到 Kafka。</p><h3 id="测试批量消费"><a href="#测试批量消费" class="headerlink" title="测试批量消费"></a>测试批量消费</h3><p>批量消费需要修改上述消费者端的配置：将配置类<code>KafkaConsumerConfiguration</code>中的配置稍作修改，往 setBatchListener 方法传入 true，表示开启批量监听。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> KafkaListenerContainerFactory<span class="token operator">&lt;</span>ConcurrentMessageListenerContainer<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">>></span> <span class="token function">kafkaListenerContainerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ConcurrentKafkaListenerContainerFactory<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentKafkaListenerContainerFactory</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置 consumerFactory</span>        factory<span class="token punctuation">.</span><span class="token function">setConsumerFactory</span><span class="token punctuation">(</span><span class="token function">consumerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置是否开启批量监听</span>        factory<span class="token punctuation">.</span><span class="token function">setBatchListener</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置消费者组中的线程数量</span>        factory<span class="token punctuation">.</span><span class="token function">setConcurrency</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> factory<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>先将批量消费监听器<code>@KafkaListener</code>注解注释掉并停止 SpringBoot 应用程序，再执行<code>testConsumerBatch</code>方法往主题中写入 20 条消息。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//@KafkaListener(id = "consumerBatch", topics = "hello-batch")</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">consumerBatch</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> messages<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"consumerBatch =====> messageSize: &amp;#123;&amp;#125;"</span><span class="token punctuation">,</span> messages<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>messages<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://zys-img.oss-cn-beijing.aliyuncs.com/img/20210603153859.png" alt="批量发送消息"></p><p>写入消息之后启动 SpringBoot ，可以看到批量消费的日志打印：</p><p><img src="https://zys-img.oss-cn-beijing.aliyuncs.com/img/20210603153916.png" alt="批量消费打印"></p><h3 id="消费者拦截器-1"><a href="#消费者拦截器-1" class="headerlink" title="消费者拦截器"></a>消费者拦截器</h3><p>将批量监听改回单条，即 setBatchListener 传入 false。执行方法<code>testConsumerInterceptor</code>，日志打印：</p><p><img src="https://zys-img.oss-cn-beijing.aliyuncs.com/img/20210603154320.png" alt="消费者拦截器"></p><p>可以看到绿框中的消息可以被正常消费，红框中的消息被拦截器过滤了，没有消费，因为消息内容包含<code>filter</code>，这是前面自定义消费者拦截器的逻辑。</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>源码地址：<a href="https://github.com/leo1604270786/hello-kafka">https://github.com/leo1604270786/hello-kafka</a></p><p><a href="https://zysite.top/archives/springboot-kafka#FkpRsPec">环境</a><a href="https://zysite.top/archives/springboot-kafka#SZnWiDJb">依赖</a><a href="https://zysite.top/archives/springboot-kafka#YzsbCKan">配置</a><a href="https://zysite.top/archives/springboot-kafka#SHhWwAJw">测试</a><a href="https://zysite.top/archives/springboot-kafka#NRsnCQdj">源码</a></p><blockquote><p><strong>Copyright:</strong> 采用 <a href="https://creativecommons.org/licenses/by/4.0/">知识共享署名4.0</a> 国际许可协议进行许可</p><p><strong>Links:</strong> <a href="https://zysite.top/archives/springboot-kafka">https://zysite.top/archives/springboot-kafka</a></p></blockquote><p><a href="https://zysite.top/tags/kafka"># Kafka</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/092512.html"/>
      <url>/2021/092512.html</url>
      
        <content type="html"><![CDATA[<p>5分钟搞定Linux安装Mysql5.7（简单快捷，建议收藏）</p><p>本文记录下我近期在Linux环境下安装Mysql5.7的实践经历。<br>服务器版本   Mysql版本<br>Centos 7.6  5.7.32</p><ol><li>下载Mysql</li></ol><p>下载地址：<a href="https://downloads.mysql.com/archives/community/">https://downloads.mysql.com/archives/community/</a><br>进入页面后选择你需要的版本进行下载，这里提供了2种格式：tar.gz和tar。</p><p>如果下载不方便，可以直接从我的网盘里面下载，版本是Mysql5.7.32-64位 tar.gz格式：</p><pre><code>链接: https://pan.baidu.com/s/186JhvA9zumiTqVQ5Ne3bKQ 提取码: n5uy</code></pre><p>下载完成之后，传到linux服务器的指定目录下：<br>2. 解压</p><pre><code>1 tar -zxvf mysql-5.7.32-linux-glibc2.12-x86_64.tar.gz -C /usr/local2 mv /usr/local mysql-5.7.32-linux-glibc2.12-x86_64 /usr/local/mysql # 重命名为mysql</code></pre><p>将其解压到指定路径，并且通过mv命令修改名字为mysql。<br>3. 创建用户和组</p><pre><code>1 groupadd mysql1 useradd -r -g mysql mysql</code></pre><ol start="4"><li><p>将安装目录所有者及所属组改为mysql</p><p> chown -R mysql.mysql /usr/local/mysql</p><p> chown -R mysql:mysql /var/data </p><p> chmod -R 755 /usr/local/mysql/data</p></li></ol><ol start="5"><li>创建data文件夹</li></ol><pre><code>1 mkdir /usr/local/mysql/data   # data文件夹用于存放数据库表之类的数据</code></pre><ol start="6"><li>初始化</li></ol><p>安装依赖包<br>mysql-bin.log </p><pre><code>1 yum install libaio</code></pre><p>初始化</p><pre><code>1 /usr/local/mysql/bin/mysqld --user=mysql --basedir=/usr/local/mysql/ --datadir=/usr/local/mysql/data --initialize或者(路径可配置)2 /usr/local/mysql/bin/mysqld --user=mysql --basedir=/usr/local/mysql/ --datadir=/opt/data/mysql/data --initialize初始化完成之后会出现一个初始的密码，一定要记住！例如。 51%xoKjwaW</code></pre><ol start="7"><li><p>修改配置文件</p><p> 1 vim /etc/my.cnf</p></li></ol><p>配置文件内容（可直接copy）：</p><pre><code>[mysqld]#data文件路径datadir=/opt/data/mysql/dataport=3306user=mysqlcharacter-set-server=utf8collation-server=utf8_general_cicharacter_set_server=utf8init_connect=&#39;SET NAMES utf8&#39;#relay_log配置中继日志relay_log=edu-mysql-relay-bin  server-id=1#log-bin=/opt/data/mysql/data/binlog/mysql-bin.loglog-bin=mysql-binmax_binlog_size = 1000M binlog-format = row  slow_query_log=1long_query_time=2log_queries_not_using_indexes=1log-error=/opt/data/mysql/data/logs/mysql_error.logsymbolic-links=0#注意mysql5.7以上会报错,解决办法参考问题1default_time_zone=Asia/Shanghai[mysqld_safe]#日志文件路径#log-error=/opt/data/mysql/logs/mysqld.log#pid-file=/opt/data/mysql/mysqld.piduser=mysqllog-error=/opt/data/mysql/data/logs/mysqld.logpid-file=/opt/data/mysql/data/mysqld.pid</code></pre><p>问题1:解决增加时区报错解决方法</p><pre><code>到https://dev.mysql.com/downloads/timezones.html下载时区文件如果你的mysql版本是5.7及以下，下载上图第一个红框中的文件如果你的mysql是5.7以上，下载上图第二个红框中的文件timezone_2021a_posix_sql.zip上传到服务器,进行解压mysql -u root -p密码use mysql;source 路径\timezone_posix.sql然后执行语句SET GLOBAL time_zone = &#39;Asia/Shanghai&#39;;</code></pre><ol start="8"><li><p>将mysql加入到系统服务中</p><p> 1 cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysql</p></li><li><p>开机启动</p><p> 1 chkconfig mysql on</p></li><li><p>启动mysql</p><p>1 service mysql start</p></li><li><p>登陆mysql</p><p>1 /usr/local/mysql/bin/mysql -uroot -p</p></li></ol><p>密码是之前初始化完出现的，在这里输入后登陆。<br>12. 修改密码</p><p>设置远程访问权限并修改密码</p><pre><code>1 alter user user() identified by &quot;123456&quot;;1 GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;123456&#39;</code></pre><ol start="13"><li>配置系统变量</li></ol><p>将mysql加入系统变量：</p><pre><code>1 vim /etc/profile1 export PATH=$PATH:/usr/local/mysql/bin1 export PATH=$PATH:/usr/local/mysql/lib</code></pre><p>完成后按ESC输入 :wq 保存退出，并输入下面的命令使配置生效：</p><pre><code>1 source /etc/profile</code></pre><p>再登陆看看：</p><pre><code>1 mysql -u root -p</code></pre><p>结束</p><pre><code>如果连不上,查看防火墙端口问题telent 192.168.1.1:2306开放此端口,或者禁用防火墙 命令:         查看防火墙状态 systemctl status firewalld         开启防火墙 systemctl start firewalld           关闭防火墙 systemctl stop firewalld         开启防火墙 service firewalld start          若遇到无法开启         先用：systemctl unmask firewalld.service          然后：systemctl start firewalld.service开放指定端口 firewall-cmd --zone=public --add-port=1935/tcp --permanent查询已开放的端口 netstat  -ntulp | grep 端口号：可以具体查看某一个端口号netstat -ntulp |grep 1935   //查看所有1935端口使用情况·查询指定端口是否已开 firewall-cmd --query-port=666/tcp提示 yes，表示开启；no表示未开启。</code></pre><h1 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h1><p>则需要在备用节点参考此部署方法部署一次<br>然后修改主库</p><pre><code>vim /etc/my.cnf[mysqld]#主数据库端ID号server_id = 192   #配置编码为utf8character_set_server=utf8mb4init_connect=&#39;SET NAMES utf8mb4&#39;   #设置mysql大小写不敏感lower_case_table_names=1  #relay_log配置中继日志relay_log=edu-mysql-relay-bin   #开启二进制日志                  log-bin = mysql-bin    #需要复制的数据库名，如果复制多个数据库，重复设置这个选项即可，注释掉则默认全部               binlog-do-db = db   #忽略需要复制的数据库binlog-ignore-db=mysql  #将从服务器从主服务器收到的更新记入到从服务器自己的二进制日志文件中                 log-slave-updates                        #控制binlog的写入频率。每执行多少次事务写入一次(这个参数性能消耗很大，但可减小MySQL崩溃造成的损失) sync_binlog = 1  #为每个session分配的内存，在事物过程中用来存储二进制日志的缓存binlog_cache_log=1M                  #这个参数一般用在主主同步中，用来错开自增值, 防止键值冲突auto_increment_offset = 1           #这个参数一般用在主主同步中，用来错开自增值, 防止键值冲突auto_increment_increment = 1            #二进制日志自动删除的天数，默认值为0,表示“没有自动删除”，启动时和二进制日志循环时可能删除  expire_logs_days = 7                    #将函数复制到slave  log_bin_trust_function_creators = true</code></pre><p>从库</p><pre><code>1 vim /etc/my.cnf[mysqld]server_id = 2#配置编码为utf8character_set_server=utf8mb4init_connect=&#39;SET NAMES utf8mb4&#39;#relay_log配置中继日志relay_log=edu-mysql-relay-bin  log-bin = mysql-binlog-slave-updatessync_binlog = 0#log buffer将每秒一次地写入log file中，并且log file的flush(刷到磁盘)操作同时进行。该模式下在事务提交的时候，不会主动触发写入磁盘的操作innodb_flush_log_at_trx_commit = 0 #忽略需要复制的数据库   binlog-ignore-db=information_schemabinlog-ignore-db=clusterbinlog-ignore-db=mysql    #指定slave要复制哪个库#replicate-do-db = db         replicate_wild_do_table=test.%#或replicate_wild_ignore_table=mysql.%#MySQL主从复制的时候，当Master和Slave之间的网络中断，但是Master和Slave无法察觉的情况下（比如防火墙或者路由问题）。#Slave会等待slave_net_timeout设置的秒数后，才能认为网络出现故障，然后才会重连并且追赶这段时间主库的数据slave-net-timeout = 60    # 函数的同步                log_bin_trust_function_creators = true</code></pre><p>配置mycat</p><ol><li><p>上传mycat和jdk1.8安装包<br>通过ftp工具上传mycat和jdk1.8安装包至/application目录。</p><p>   mkdir /application/<br>   cd /application/</p></li></ol><ol start="2"><li><p>安装配置jdk（略）<br>可参考地址：<a href="https://blog.csdn.net/xzm5708796/article/details/83268136">https://blog.csdn.net/xzm5708796/article/details/83268136</a></p></li><li><p>解压mycat并配置环境变量</p><p>   tar -xzvf Mycat-web-linux.tar.gz<br>   echo “export PATH=/application/mycat/bin:$PATH”&gt;&gt;/etc/profile<br>   source  /etc/profile</p></li></ol><p>或者<br>     vim /etc/profile</p><pre><code> export MYCAT_HOME=$PATH:/usr/local/mycat export PATH=$PATH:$MACAT_HOME/bin source /etc/profile</code></pre><ol start="4"><li>创建用户<br>举例：在master1上创建两个数据库用户,rep用户用来写入，rep_r用来读。</li></ol><pre><code>mysql -uroot -p输入密码注意：生产环境要尽量减小权限！mysql&gt; CREATE USER &#39;rep&#39;@&#39;%&#39; IDENTIFIED BY &#39;123456&#39;;mysql&gt; CREATE USER &#39;rep_r&#39;@&#39;%&#39; IDENTIFIED BY &#39;123456&#39;;mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &#39;rep&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;123456&#39;;mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &#39;rep_r&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;123456&#39;;mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &#39;rep&#39;@&#39;%&#39; IDENTIFIED BY &#39;123456&#39;;mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &#39;rep_r&#39;@&#39;%&#39; IDENTIFIED BY &#39;123456&#39;;mysql&gt; flush privileges;</code></pre><ol start="5"><li>修改server.xml文件<pre><code>cd /application/mycat/conf/vi server.xml</code></pre></li></ol><pre><code># 进入容器&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!-- - - Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);  - you may not use this file except in compliance with the License. - You  may obtain a copy of the License at - - http://www.apache.org/licenses/LICENSE-2.0  - - Unless required by applicable law or agreed to in writing, software -  distributed under the License is distributed on an &quot;AS IS&quot; BASIS, - WITHOUT  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. - See the  License for the specific language governing permissions and - limitations under the License. --&gt;&lt;!DOCTYPE mycat:server SYSTEM &quot;server.dtd&quot;&gt;&lt;mycat:server xmlns:mycat=&quot;http://org.opencloudb/&quot;&gt;&lt;system&gt;&lt;property name=&quot;defaultSqlParser&quot;&gt;druidparser&lt;/property&gt;&lt;property name=&quot;charset&quot;&gt;utf8mb4&lt;/charset&gt;      &lt;!--  &lt;property name=&quot;useCompression&quot;&gt;1&lt;/property&gt;--&gt; &lt;!--1为开启mysql压缩协议--&gt;&lt;!-- &lt;property name=&quot;processorBufferChunk&quot;&gt;40960&lt;/property&gt; --&gt; &lt;!--  &lt;property name=&quot;processors&quot;&gt;1&lt;/property&gt;  &lt;property name=&quot;processorExecutor&quot;&gt;32&lt;/property&gt; --&gt;&lt;!--默认是65535 64K 用于sql解析时最大文本长度 --&gt;&lt;!--&lt;property name=&quot;maxStringLiteralLength&quot;&gt;65535&lt;/property&gt;--&gt;&lt;!--&lt;property name=&quot;sequnceHandlerType&quot;&gt;0&lt;/property&gt;--&gt;&lt;!--&lt;property name=&quot;backSocketNoDelay&quot;&gt;1&lt;/property&gt;--&gt;&lt;!--&lt;property name=&quot;frontSocketNoDelay&quot;&gt;1&lt;/property&gt;--&gt;&lt;!--&lt;property name=&quot;processorExecutor&quot;&gt;16&lt;/property&gt;--&gt;  &lt;!-- &lt;property name=&quot;mutiNodeLimitType&quot;&gt;1&lt;/property&gt; 0：开启小数量级（默认） ；1：开启亿级数据排序&lt;property name=&quot;mutiNodePatchSize&quot;&gt;100&lt;/property&gt; 亿级数量排序批量   &lt;property name=&quot;processors&quot;&gt;32&lt;/property&gt; &lt;property name=&quot;processorExecutor&quot;&gt;32&lt;/property&gt;    &lt;property name=&quot;serverPort&quot;&gt;8066&lt;/property&gt; &lt;property name=&quot;managerPort&quot;&gt;9066&lt;/property&gt;    &lt;property name=&quot;idleTimeout&quot;&gt;300000&lt;/property&gt; &lt;property name=&quot;bindIp&quot;&gt;0.0.0.0&lt;/property&gt; &lt;property name=&quot;frontWriteQueueSize&quot;&gt;4096&lt;/property&gt; &lt;property name=&quot;processors&quot;&gt;32&lt;/property&gt; --&gt;&lt;/system&gt;&lt;!--#注：配置写入用户和数据库，这里配置的数据库名为sky(schema中配置的虚拟数据库名字)，生产环境根据实际情况配置，多个库用逗号隔开。--&gt;&lt;user name=&quot;root&quot;&gt;&lt;property name=&quot;password&quot;&gt;123456&lt;/property&gt;&lt;property name=&quot;schemas&quot;&gt;sky&lt;/property&gt;&lt;/user&gt;&lt;!--#下面配置只读用户和数据库。--&gt;&lt;user name=&quot;dev&quot;&gt;&lt;property name=&quot;password&quot;&gt;123456&lt;/property&gt;&lt;property name=&quot;schemas&quot;&gt;sky&lt;/property&gt;&lt;property name=&quot;readOnly&quot;&gt;true&lt;/property&gt;&lt;/user&gt;&lt;/mycat:server&gt;</code></pre><ol start="6"><li>修改schema.xml文件<br> vi schema.xml</li></ol><pre><code>&lt;?xml version=&quot;1.0&quot;?&gt;   &lt;!DOCTYPE mycat:schema SYSTEM &quot;schema.dtd&quot;&gt;    &lt;mycat:schema xmlns:mycat=&quot;http://org.opencloudb/&quot; &gt;                &lt;schema name=&quot;sky&quot; checkSQLschema=&quot;true&quot; sqlMaxLimit=&quot;100&quot;&gt;                    &lt;table name=&quot;travelrecord&quot; dataNode=&quot;dn1&quot; rule=&quot;auto-sharding-long&quot; /&gt;            &lt;/schema&gt;            &lt;dataNode name=&quot;dn1&quot; dataHost=&quot;ieshost&quot; database=&quot;ies&quot; /&gt;           &lt;dataHost name=&quot;ieshost&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;3&quot;                  writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;jdbc&quot; switchType=&quot;1&quot;  slaveThreshold=&quot;100&quot;&gt;                   &lt;heartbeat&gt;select user()&lt;/heartbeat&gt;                  &lt;writeHost host=&quot;master&quot; url=&quot;jdbc:mysql://192.168.1.253:3339?useSSL=false&amp;amp;characterEncoding=utf8&amp;amp;serverTimezone=GMT%2B8&quot; user=&quot;root    &quot;                           password=&quot;123456&quot;&gt;                         &lt;readHost host=&quot;slave&quot; url=&quot;jdbc:mysql://192.168.1.253:3340?useSSL=false&amp;amp;characterEncoding=utf8&amp;amp;serverTimezone=GMT%2B8&quot; user    =&quot;dev&quot; password=&quot;123456&quot; /&gt;                  &lt;/writeHost&gt;                 &lt;writeHost host=&quot;slave&quot; url=&quot;jdbc:mysql://192.168.1.253:3339?useSSL=false&amp;amp;characterEncoding=utf8&amp;amp;serverTimezone=GMT%2B8&quot; user=&quot;dev&quot;                          password=&quot;123456&quot; /&gt;          &lt;/dataHost&gt;  &lt;/mycat:schema&gt;</code></pre><p>  注意：当多个从节点时，需配置多个读写内容信息</p><p>说明：</p><pre><code>Balance：1、balance=0  不开启读写分离机制，所有读操作都发送到当前可用的writehost了 .2、balance=1  全部的readhost与stand by writeHost 参与select语句的负载均衡。简单的说，双主双从模式(M1àS1,M2àS2，并且M1和M2互为主备)，正常情况下，M1，S1，S2都参与select语句的复杂均衡。3、balance=2  所有读操作都随机的在readhost和writehost上分发writeType ：负载均衡类型，目前的取值有3种：1、writeType=”0″, 所有写操作发送到配置的第一个writeHost。2、writeType=”1″，所有写操作都随机的发送到配置的writeHost。3、writeType=”2″，不执行写操作。switchType ：1、switchType=-1 表示不自动切换2、switchType=1 默认值，自动切换3、switchType=2 基于MySQL 主从同步的状态决定是否切换7. 启动mycat   mycat start   cd /application/mycat/logs/;cat wrapper.log看到如下内容证明启动成功八、验证我们采用第三方工具的方式进行连接验证1. 使用navicat连接mycat   测试只读用户   测试写入用户</code></pre><h1 id="data文件路径"><a href="#data文件路径" class="headerlink" title="data文件路径"></a>data文件路径</h1><p>server-id=2<br>log-bin=mysql-bin #日志文件同步方式<br>binlog_do_db=test #同步数据库，注释的话，默认全部</p><p>重启数据库service mysql restart<br>进入master数据库执行，查看二进制文件和行数<br>sql&gt;show master status<br>登录slave数据库<br>sql&gt;change master to master_host=’198.1.1.2’,master_port=3306,master_user=’root’,master_password=’123456’,master_log_file=’mysql-bin.0002’,master_log_pos=216<br>sql&gt;start slave<br>执行 查看<br>sql&gt;show slave status;</p><hr><p>Slave_IO_Runing:yes<br>Slave_sql_Runing:yes<br>即表示成功<br>然后在分别在主库增加数据看从库是否同步<br>如果出现uuid的错误<br>在slave服务器上输入命令<br>cat /etc/my.cnf<br>查看datadir配置的目录<br>进入datadir配置的目录<br>cd ·······<br>然后看目录下是否存在auto.cnf目录<br>删除目录<br>rm -rf auto.cnf<br>重启数据库service mysql restart</p><p>以上就是Mysql5.7在linux服务器上安装部署的全部内容了，按照这个教程你可以快速搭建出一套mysql环境，有需要的小伙伴建议你收藏起来，备用。<br>————————————————<br>版权声明：本文为CSDN博主「程序员青戈」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/xqnode/article/details/113652931">https://blog.csdn.net/xqnode/article/details/113652931</a></p><p>[mysqld]</p><h1 id="data文件路径-1"><a href="#data文件路径-1" class="headerlink" title="data文件路径"></a>data文件路径</h1><p>#datadir=/usr/local/mysql/data<br>datadir=/opt/data/mysql/data<br>port=3306<br>user=mysql<br>character-set-server=utf8<br>collation-server=utf8_general_ci<br>server-id=1<br>log-bin=mysql-bin.log<br>max_binlog_size = 1000M<br>binlog-format = row<br>slow_query_log=1<br>long_query_time=2<br>log_queries_not_using_indexes=1<br>log-error=/opt/data/mysql/data/logs/mysql_error.log<br>symbolic-links=0<br>default_time_zone=Asia/Shanghai<br>max_connections = 1500</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/09256.html"/>
      <url>/2021/09256.html</url>
      
        <content type="html"><![CDATA[<h1 id="docker-compose搭建redis集群–Cluster模式"><a href="#docker-compose搭建redis集群–Cluster模式" class="headerlink" title="docker-compose搭建redis集群–Cluster模式"></a><a href="https://www.cnblogs.com/brithToSpring/p/13187206.html">docker-compose搭建redis集群–Cluster模式</a></h1><p>Redis有三种集群模式</p><p>* 主从模式</p><p>* Sentinel模式</p><p>* Cluster模式</p><p>参考:<a href="https://blog.csdn.net/miss1181248983/article/details/90056960">Redis集群详解</a></p><p>1.首先需要docker 、<a href="https://www.cnblogs.com/brithToSpring/p/13152660.html">docker-compose 环境</a></p><h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://img2020.cnblogs.com/blog/1587750/202006/1587750-20200624113653453-994704635.png" alt="img"></h3><p>2.下载相关配置文件</p><p>Gitee地址: <a href="https://gitee.com/lifeToSpring/redis-cluster">https://gitee.com/lifeToSpring/redis-cluster</a></p><p>目录结构:</p><p><img src="https://img2020.cnblogs.com/blog/1587750/202006/1587750-20200624140228871-1911929950.png" alt="img"></p><p> redis.sh</p><pre><code>redis-server  /config/nodes-$&#123;PORT&#125;.conf</code></pre><p>3.修改对应nodes-${PORT}.conf的配置文件<a href="https://www.cnblogs.com/tswcypy/p/11458704.html">(参考)</a>:</p><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><pre><code># bind 127.0.0.1 //加上注释#protected-mode no //关闭保护模式port 6391  //绑定自定义端口# daemonize yes //禁止redis后台运行pidfile /var/run/redis_6391.pidcluster-enabled yes //开启集群 把注释#去掉cluster-config-file nodes_6391.conf //集群的配置 配置文件首次启动自动生成requirepass 1234masterauth 1234appendonly yes //开启aofcluster-announce-ip 10.xx.xx.xx   //要宣布的IP地址。nat模式要指定宿主机IPcluster-announce-port 6391  //要宣布的数据端口。cluster-announce-bus-port 16391  //要宣布的集群总线端口</code></pre><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><p>4.1 <strong>节点192.168.255.225：</strong></p><p>docker-compose.yml</p><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><pre><code>services:  redis-master1:    image: redis:5.0 # 基础镜像    container_name: node1 # 容器名称    working_dir: /config # 切换工作目录    environment: # 环境变量      - PORT=6391 # 会使用config/nodes-$&#123;PORT&#125;.conf这个配置文件    ports: # 映射端口，对外提供服务      - 6391:6391 # redis的服务端口      - 16391:16391 # redis集群监控端口    stdin_open: true # 标准输入打开    tty: true # 后台运行不退出    network_mode: host # 使用host模式    privileged: true # 拥有容器内命令执行的权限    volumes:      - /mydata/redis-cluster/config:/config #配置文件目录映射到宿主机    entrypoint: # 设置服务默认的启动程序      - /bin/bash      - redis.sh  redis-master2:    image: redis:5.0    working_dir: /config    container_name: node2    environment:      - PORT=6392    ports:      - 6392:6392      - 16392:16392    stdin_open: true    network_mode: host    tty: true    privileged: true    volumes:      - /mydata/redis-cluster/config:/config    entrypoint:      - /bin/bash      - redis.sh  redis-master3:    image: redis:5.0    container_name: node3    working_dir: /config    environment:      - PORT=6393    ports:      - 6393:6393      - 16393:16393    stdin_open: true    network_mode: host    tty: true    privileged: true    volumes:      - /mydata/redis-cluster/config:/config    entrypoint:      - /bin/bash      - redis.sh</code></pre><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><p> 启动redis实例</p><pre><code>docker-compose -f docker-compose.yml up</code></pre><p><img src="https://img2020.cnblogs.com/blog/1587750/202006/1587750-20200624140834790-1442380743.png" alt="img"></p><p><strong>4.2 节点192.168.255.226：</strong></p><p>docker-compose.yml</p><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><pre><code>version: &quot;3&quot;services:  redis-slave1:    image: redis:5.0    container_name: node4    working_dir: /config    environment:      - PORT=6394    ports:      - 6394:6394      - 16394:16394    stdin_open: true    network_mode: host    tty: true    privileged: true    volumes:      - /mydata/redis-cluster/config:/config    entrypoint:      - /bin/bash      - redis.sh  redis-slave2:    image: redis:5.0    working_dir: /config    container_name: node5    environment:      - PORT=6395    ports:      - 6395:6395      - 16395:16395    stdin_open: true    network_mode: host    tty: true    privileged: true    volumes:      - /mydata/redis-cluster/config:/config    entrypoint:      - /bin/bash      - redis.sh  redis-slave3:    image: redis:5.0    container_name: node6    working_dir: /config    environment:      - PORT=6396    ports:      - 6396:6396      - 16396:16396    stdin_open: true    network_mode: host    tty: true    privileged: true    volumes:      - /mydata/redis-cluster/config:/config    entrypoint:      - /bin/bash      - redis.sh</code></pre><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><p>启动redis实例</p><pre><code>docker-compose -f docker-compose.yml up</code></pre><p><img src="https://img2020.cnblogs.com/blog/1587750/202006/1587750-20200624140707818-2030320017.png" alt="img"></p><p>5 使用docker镜像 zvelo/<a href="https://www.cnblogs.com/ivictor/p/9768010.html">redis-trib 构建redis集群</a></p><pre><code>docker run --rm -it zvelo/redis-trib create --replicas 1 192.168.255.225:6391 192.168.255.225:6392 192.168.255.225:6393 192.168.255.226:6394 192.168.255.226:6395 192.168.255.226:6396</code></pre><p> <img src="https://img2020.cnblogs.com/blog/1587750/202006/1587750-20200624143330367-2069772548.png" alt="img"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/09255.html"/>
      <url>/2021/09255.html</url>
      
        <content type="html"><![CDATA[<h1 id="docker搭建redis集群"><a href="#docker搭建redis集群" class="headerlink" title="docker搭建redis集群"></a>docker搭建redis集群</h1><h3 id="硬件环境"><a href="#硬件环境" class="headerlink" title="硬件环境"></a>硬件环境</h3><ol><li><p>mac 下centos虚拟机,版本号CentOS Linux release 7.2.1511.</p></li><li><p>docker 版本号 19.03.</p></li><li><p>docker compose 版本号 1.25.4.</p></li><li><p>本次不考虑设置redis集群密码</p></li><li><p>redis版本5.0.7    </p><h3 id="安装docker与docker-compose"><a href="#安装docker与docker-compose" class="headerlink" title="安装docker与docker-compose"></a>安装docker与docker-compose</h3></li></ol><h4 id="1-安装docker"><a href="#1-安装docker" class="headerlink" title="1.安装docker"></a>1.安装docker</h4><h5 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h5><pre><code>sudo yum remove docker \                  docker-client \                  docker-client-latest \                  docker-common \                  docker-latest \                  docker-latest-logrotate \                  docker-logrotate \                  docker-engine</code></pre><h5 id="安装-Docker-Engine-Community"><a href="#安装-Docker-Engine-Community" class="headerlink" title="安装 Docker Engine-Community"></a>安装 Docker Engine-Community</h5><pre><code># 1.设置仓库sudo yum install -y yum-utils \  device-mapper-persistent-data \  lvm2# 2.设置稳定的仓库sudo yum-config-manager \    --add-repo \    https://download.docker.com/linux/centos/docker-ce.repo# 3.安装最新版本的 Docker Engine-Community 和 containerdsudo yum install docker-ce docker-ce-cli containerd.io# 4.或者安装特定版本的 Docker Engine-Community，请在存储库中列出可用版本，然后选择并安装 #列出并排序您存储库中可用的版本。此示例按版本号（从高到低）对结果进行排序  yum list docker-ce --showduplicates | sort -r  docker-ce.x86_64  3:18.09.1-3.el7                     docker-ce-stable  docker-ce.x86_64  3:18.09.0-3.el7                     docker-ce-stable  docker-ce.x86_64  18.06.1.ce-3.el7                    docker-ce-stable  docker-ce.x86_64  18.06.0.ce-3.el7                    docker-ce-stable #通过其完整的软件包名称安装特定版本，该软件包名称是软件包名称（docker-ce）加上版本字符串（第二列），从第一个冒号（:）一直到第一个连字符，并用连字符（-）分隔。例如：docker-ce-18.09.1 sudo yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io eg:sudo yum install docker-ce-&lt;19.03&gt; docker-ce-cli-&lt;19.03&gt; containerd.io</code></pre><h5 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h5><pre><code>sudo systemctl start docker#验证是否安装成功# 执行docker --version，出现下面提示表示安装成功Docker version 19.03.6, build 369ce74a3c</code></pre><h4 id="2-安装docker-compose"><a href="#2-安装docker-compose" class="headerlink" title="2.安装docker-compose"></a>2.安装docker-compose</h4><h5 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h5><pre><code>#Linux 上我们可以从 Github 上下载它的二进制包来使用，最新发行的版本地址：#https://github.com/docker/compose/releases。#运行以下命令以下载 Docker Compose 的当前稳定版本,要安装其他版本的 Compose，请替换 1.24.1sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.25.4/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</code></pre><h5 id="将可执行权限应用于二进制文件"><a href="#将可执行权限应用于二进制文件" class="headerlink" title="将可执行权限应用于二进制文件"></a>将可执行权限应用于二进制文件</h5><pre><code>sudo chmod +x /usr/local/bin/docker-compose</code></pre><h5 id="创建软链"><a href="#创建软链" class="headerlink" title="创建软链"></a>创建软链</h5><pre><code>sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</code></pre><h5 id="测试是否安装成功"><a href="#测试是否安装成功" class="headerlink" title="测试是否安装成功"></a>测试是否安装成功</h5><pre><code>#执行docker-compose --version，出现下面提示代表安装成功docker-compose version 1.25.4, build 8d51620a</code></pre><h3 id="搭建redis集群"><a href="#搭建redis集群" class="headerlink" title="搭建redis集群"></a>搭建redis集群</h3><h4 id="1-redis配置配置文件配置"><a href="#1-redis配置配置文件配置" class="headerlink" title="1.redis配置配置文件配置"></a>1.redis配置配置文件配置</h4><h5 id="github上面下载redis-conf文件"><a href="#github上面下载redis-conf文件" class="headerlink" title="github上面下载redis.conf文件"></a>github上面下载redis.conf文件</h5><pre><code># 新建配置目录sudo mkdir docker-test-redis-cluster# 下载地址https://github.com/antirez/redis/blob/unstable/redis.conf,把下载文件复制到docker-test-redis-cluster</code></pre><h5 id="配置3主3从redis配置"><a href="#配置3主3从redis配置" class="headerlink" title="配置3主3从redis配置"></a>配置3主3从redis配置</h5><pre><code># 以redis.conf为模本复制出6份配置文件#nodes-6391.conf，nodes-6392.conf，nodes-6393.conf，nodes-6394.conf#nodes-6395.conf，nodes-6396.confcd  docker-test-redis-clusterll-rw-r--r--. 1 root root 80013 2月  23 22:10 nodes-6391.conf-rw-r--r--. 1 root root 80014 2月  23 22:10 nodes-6392.conf-rw-r--r--. 1 root root 80014 2月  23 22:10 nodes-6393.conf-rw-r--r--. 1 root root 80015 2月  23 22:10 nodes-6394.conf-rw-r--r--. 1 root root 79940 2月  23 22:10 nodes-6395.conf-rw-r--r--. 1 root root 80014 2月  23 22:10 nodes-6396.conf# 分别修改6个配置文件中的一下项：#注释此项，容许任意ip连接#bind 127.0.0.1#开启集群功能cluster-enabled yes#设置节点端口，与配置文件名称数字一致，如当前文件为nodes-6391.conf，则为6391port 6391#集群内部配置文件，与配置文件名称数字一致，如当前文件为nodes-6391.conf，则为6391.confcluster-config-file &quot;6391.conf&quot;#节点超时时间，单位毫秒cluster-node-timeout 15000#容许无密码连接protected-mode no</code></pre><h5 id="docker-compose-yml文件配置"><a href="#docker-compose-yml文件配置" class="headerlink" title="docker-compose.yml文件配置"></a>docker-compose.yml文件配置</h5><pre><code># 创建docker-compose.yml文件cd docker-test-redis-clustersudo mkdir rediscluster-composecd rediscluster-composetouch  docker-compose.yml# 往docker-compose.yml文件中添加以下配置:version: &quot;3.6&quot;services:  redis-master1:     image: redis:5.0 # 基础镜像     container_name: redis-master1 # 容器服务名     working_dir: /config # 工作目录     environment: # 环境变量       - PORT=6391 # 跟 config/nodes-6391.conf 里的配置一样的端口     network_mode: host # 使用docker宿主计IP，在我自己Mac docker下无效...     ports: # 映射端口，对外提供服务       - &quot;6391:6391&quot; # redis 的服务端口       - &quot;16391:16391&quot; # redis 集群监控端口     stdin_open: true # 标准输入打开     tty: true     privileged: true # 拥有容器内命令执行的权限     volumes: [&quot;/usr/wzq/docker-test-redis-cluster:/config&quot;] # 映射数据卷，配置目录     entrypoint: # 设置服务默认的启动程序       - /bin/bash       - redis.sh  redis-master2:       image: redis:5.0       working_dir: /config       container_name: redis-master2       environment:              - PORT=6392       network_mode: host       ports:         - &quot;6392:6392&quot;         - &quot;16392:16392&quot;       stdin_open: true       tty: true       privileged: true       volumes: [&quot;/usr/wzq/docker-test-redis-cluster:/config&quot;]       entrypoint:         - /bin/bash         - redis.sh  redis-master3:       image: redis:5.0       container_name: redis-master3       working_dir: /config       environment:              - PORT=6393       network_mode: host       ports:         - &quot;6393:6393&quot;         - &quot;16393:16393&quot;       stdin_open: true       tty: true       privileged: true       volumes: [&quot;/usr/wzq/docker-test-redis-cluster:/config&quot;]       entrypoint:         - /bin/bash         - redis.sh  redis-slave1:       image: redis:5.0       container_name: redis-slave1       working_dir: /config       environment:            - PORT=6394       network_mode: host       ports:         - &quot;6394:6394&quot;         - &quot;16394:16394&quot;       stdin_open: true       tty: true       privileged: true       volumes: [&quot;/usr/wzq/docker-test-redis-cluster:/config&quot;]       entrypoint:         - /bin/bash         - redis.sh  redis-salve2:       image: redis:5.0       working_dir: /config       container_name: redis-salve2       environment:             - PORT=6395       network_mode: host       ports:         - &quot;6395:6395&quot;         - &quot;16395:16395&quot;       stdin_open: true       tty: true       privileged: true       volumes: [&quot;/usr/wzq/docker-test-redis-cluster:/config&quot;]       entrypoint:         - /bin/bash         - redis.sh  redis-salve3:       image: redis:5.0       container_name: redis-slave3       working_dir: /config       environment:          - PORT=6396       network_mode: host       ports:         - &quot;6396:6396&quot;         - &quot;16396:16396&quot;       stdin_open: true       tty: true       privileged: true       volumes: [&quot;/usr/wzq/docker-test-redis-cluster:/config&quot;]       entrypoint:         - /bin/bash         - redis.sh</code></pre><h5 id="编写-redis-默认的启动脚本"><a href="#编写-redis-默认的启动脚本" class="headerlink" title="编写 redis 默认的启动脚本"></a>编写 redis 默认的启动脚本</h5><pre><code># redis配置文件同级目录下添加redis启动脚本cd docker-test-redis-clustersudo  touch  redis.sh#添加下面内容，compose文件指定了docker容器的工作目录为/configredis-server  /config/nodes-$&#123;PORT&#125;.conf</code></pre><h5 id="docker-compose-启动"><a href="#docker-compose-启动" class="headerlink" title="docker-compose 启动"></a>docker-compose 启动</h5><pre><code>#启动docker-compose up -d#出现下面提示Creating redis-master1 ... doneCreating redis-slave3  ... doneCreating redis-salve2  ... doneCreating redis-master2 ... doneCreating redis-slave1  ... doneCreating redis-master3 ... done#测试是否启动成功docker ps -a# 出现下面提示表示启动成功CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                      PORTS               NAMESac5e4158a965        redis:5.0           &quot;/bin/bash redis.sh&quot;     9 seconds ago       Up 6 seconds                                    redis-salve21ad975cc9e27        redis:5.0           &quot;/bin/bash redis.sh&quot;     9 seconds ago       Up 6 seconds                                    redis-master2792aa7ac1344        redis:5.0           &quot;/bin/bash redis.sh&quot;     9 seconds ago       Up 6 seconds                                    redis-slave3cd9dded0cd07        redis:5.0           &quot;/bin/bash redis.sh&quot;     9 seconds ago       Up 6 seconds                                    redis-master33140f27fdcae        redis:5.0           &quot;/bin/bash redis.sh&quot;     9 seconds ago       Up 7 seconds                                    redis-slave17349f6dba594        redis:5.0           &quot;/bin/bash redis.sh&quot;     9 seconds ago       Up 7 seconds                                    redis-master1</code></pre><h5 id="初始化redis集群"><a href="#初始化redis集群" class="headerlink" title="初始化redis集群"></a>初始化redis集群</h5><pre><code>#创建 3 主 3 从的 redis 集群#进入其中一个redis容器，docker宿主计IP为192.168.0.105docker exec -it redis-master1 /bin/bash#执行初始化命令，这一步开始命令须在 redis5.0 及以上版本运行redis-cli --cluster create  192.168.0.105:6391 192.168.0.105:6392 192.168.0.105:6393 192.168.0.105:6394 192.168.0.105:6395 192.168.0.105:6396 --cluster-replicas 1#出现以下提示：&gt;&gt;&gt; Performing hash slots allocation on 6 nodes...Master[0] -&gt; Slots 0 - 5460Master[1] -&gt; Slots 5461 - 10922Master[2] -&gt; Slots 10923 - 16383Adding replica 192.168.0.105:6395 to 192.168.0.105:6391Adding replica 192.168.0.105:6396 to 192.168.0.105:6392Adding replica 192.168.0.105:6394 to 192.168.0.105:6393&gt;&gt;&gt; Trying to optimize slaves allocation for anti-affinity[WARNING] Some slaves are in the same host as their masterM: 8488b09fc576379b11cd692a0016a8a4ab0cdf42 192.168.0.105:6391   slots:[0-5460] (5461 slots) masterM: 704dc6e634c183b9368c868b75686fe9b765648b 192.168.0.105:6392   slots:[5461-10922] (5462 slots) masterM: d845dc1b0f1354ce77b8ae671698e80eddfcce6f 192.168.0.105:6393   slots:[10923-16383] (5461 slots) masterS: f5b2baca3411d8b7c86ca2c73d50c2bbc3e9ee3c 192.168.0.105:6394   replicates 704dc6e634c183b9368c868b75686fe9b765648bS: b7d03824ae4c23ed6706323465e8263face24b2f 192.168.0.105:6395   replicates d845dc1b0f1354ce77b8ae671698e80eddfcce6fS: 85fe1b81c15917d776cd868c971d60812847db8b 192.168.0.105:6396   replicates 8488b09fc576379b11cd692a0016a8a4ab0cdf42Can I set the above configuration? (type &#39;yes&#39; to accept):#输入yes,出现下面提示，代表初始化成功&gt;&gt;&gt; Nodes configuration updated&gt;&gt;&gt; Assign a different config epoch to each node&gt;&gt;&gt; Sending CLUSTER MEET messages to join the clusterWaiting for the cluster to join......&gt;&gt;&gt; Performing Cluster Check (using node 192.168.0.105:6391)M: 8488b09fc576379b11cd692a0016a8a4ab0cdf42 192.168.0.105:6391   slots:[0-5460] (5461 slots) master   1 additional replica(s)S: b7d03824ae4c23ed6706323465e8263face24b2f 192.168.0.105:6395   slots: (0 slots) slave   replicates d845dc1b0f1354ce77b8ae671698e80eddfcce6fM: 704dc6e634c183b9368c868b75686fe9b765648b 192.168.0.105:6392   slots:[5461-10922] (5462 slots) master   1 additional replica(s)S: f5b2baca3411d8b7c86ca2c73d50c2bbc3e9ee3c 192.168.0.105:6394   slots: (0 slots) slave   replicates 704dc6e634c183b9368c868b75686fe9b765648bS: 85fe1b81c15917d776cd868c971d60812847db8b 192.168.0.105:6396   slots: (0 slots) slave   replicates 8488b09fc576379b11cd692a0016a8a4ab0cdf42M: d845dc1b0f1354ce77b8ae671698e80eddfcce6f 192.168.0.105:6393   slots:[10923-16383] (5461 slots) master   1 additional replica(s)[OK] All nodes agree about slots configuration.&gt;&gt;&gt; Check for open slots...&gt;&gt;&gt; Check slots coverage...[OK] All 16384 slots covered.</code></pre><h5 id="测试是否搭建成功"><a href="#测试是否搭建成功" class="headerlink" title="测试是否搭建成功"></a>测试是否搭建成功</h5><pre><code>#docker宿主计上也已安装redis-cli#执行下面名令，注意要加-c 代表集群模式，否则重定向时会出现 (error) MOVED 15588错误redis-cli -c  -h 192.168.0.105 -p 6391#连接成功则出现：192.168.0.105:6391&gt;#输入cluster nodes,出现下面信息则代表搭建成功192.168.0.105:6391&gt;cluster nodesb7d03824ae4c23ed6706323465e8263face24b2f 192.168.0.105:6395@16395 slave d845dc1b0f1354ce77b8ae671698e80eddfcce6f 0 1582518782773 5 connected704dc6e634c183b9368c868b75686fe9b765648b 192.168.0.105:6392@16392 master - 0 1582518783000 2 connected 5461-109228488b09fc576379b11cd692a0016a8a4ab0cdf42 192.168.0.105:6391@16391 myself,master - 0 1582518782000 1 connected 0-5460f5b2baca3411d8b7c86ca2c73d50c2bbc3e9ee3c 192.168.0.105:6394@16394 slave 704dc6e634c183b9368c868b75686fe9b765648b 0 1582518781000 4 connected85fe1b81c15917d776cd868c971d60812847db8b 192.168.0.105:6396@16396 slave 8488b09fc576379b11cd692a0016a8a4ab0cdf42 0 1582518783778 6 connectedd845dc1b0f1354ce77b8ae671698e80eddfcce6f 192.168.0.105:6393@16393 master - 0 1582518781767 3 connected 10923-16383#set 一个key为wl，你会发现会从定向到其他节点，自此大功告成192.168.0.105:6391&gt; set wl wzq-&gt; Redirected to slot [15588] located at 192.168.0.105:6393</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/09259.html"/>
      <url>/2021/09259.html</url>
      
        <content type="html"><![CDATA[<h1 id="docker-compose部署Redis-Cluster集群"><a href="#docker-compose部署Redis-Cluster集群" class="headerlink" title="docker-compose部署Redis-Cluster集群"></a>docker-compose部署Redis-Cluster集群</h1><h2 id="创建目录和文件"><a href="#创建目录和文件" class="headerlink" title="创建目录和文件"></a>创建目录和文件</h2><pre class=" language-shell"><code class="language-shell">├── docker-compose.yml├── redis-6371│   ├── conf│   │   └── redis.conf│   └── data├── redis-6372│   ├── conf│   │   └── redis.conf│   └── data├── redis-6373│   ├── conf│   │   └── redis.conf│   └── data├── redis-6374│   ├── conf│   │   └── redis.conf│   └── data├── redis-6375│   ├── conf│   │   └── redis.conf│   └── data└── redis-6376    ├── conf    │   └── redis.conf    └── data</code></pre><h2 id="redis-conf-配置文件"><a href="#redis-conf-配置文件" class="headerlink" title="redis.conf 配置文件"></a>redis.conf 配置文件</h2><p>redis.conf 配置文件内容如下：</p><pre class=" language-shell"><code class="language-shell"># bind 127.0.0.1 //加上注释#daemonize no //禁止redis后台运行protected-mode no //关闭保护模式,设置密码port 6391  //绑定自定义端口pidfile /var/run/redis_6371.pidcluster-enabled yes //开启集群 把注释#去掉#集群内部配置文件cluster-config-file nodes-6391  cluster-node-timeout 15000appendonly yes //开启aofrequirepass 123456  //必须设置密码masterauth 123456cluster-announce-ip 10.98.141.43   //要宣布的IP地址。nat模式要指定宿主机IPcluster-announce-port 6391  //要宣布的数据端口。cluster-announce-bus-port 16391  //要宣布的集群总线端口</code></pre><p>需要更改每个节点的redis.conf的配置,参考上面配置文件,不同的配置文件,替换端口和ip。</p><h2 id="docker-compose-配置文件"><a href="#docker-compose-配置文件" class="headerlink" title="docker-compose 配置文件"></a>docker-compose 配置文件</h2><p>docker-compose.yml 文件内容如下：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">redis-master1</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis<span class="token punctuation">:</span><span class="token number">5.0 </span><span class="token comment" spellcheck="true"># 基础镜像</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span><span class="token number">6391 </span><span class="token comment" spellcheck="true"># 容器名称</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always <span class="token comment" spellcheck="true"># 容器总是重新启动</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 映射端口，对外提供服务</span>      <span class="token punctuation">-</span> 6391<span class="token punctuation">:</span><span class="token number">6391 </span><span class="token comment" spellcheck="true"># redis的服务端口</span>      <span class="token punctuation">-</span> 16391<span class="token punctuation">:</span><span class="token number">16391 </span><span class="token comment" spellcheck="true"># redis集群监控端口</span>    <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 拥有容器内命令执行的权限</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> /Users/sunan/docker/redis<span class="token punctuation">-</span>cluster/redis<span class="token punctuation">-</span>6391/conf/redis.conf<span class="token punctuation">:</span>/usr/local/etc/redis/redis.conf <span class="token comment" spellcheck="true">#配置文件目录映射到宿主机</span>      <span class="token punctuation">-</span> /Users/sunan/docker/redis<span class="token punctuation">-</span>cluster/redis<span class="token punctuation">-</span>6391/data<span class="token punctuation">:</span>/data    <span class="token key atrule">command</span><span class="token punctuation">:</span>      redis<span class="token punctuation">-</span>server /usr/local/etc/redis/redis.conf    <span class="token key atrule">redis-master2</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis<span class="token punctuation">:</span><span class="token number">5.0 </span><span class="token comment" spellcheck="true"># 基础镜像</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span><span class="token number">6392 </span><span class="token comment" spellcheck="true"># 容器名称</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always <span class="token comment" spellcheck="true"># 容器总是重新启动</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 映射端口，对外提供服务</span>      <span class="token punctuation">-</span> 6392<span class="token punctuation">:</span><span class="token number">6392 </span><span class="token comment" spellcheck="true"># redis的服务端口</span>      <span class="token punctuation">-</span> 16392<span class="token punctuation">:</span><span class="token number">16392 </span><span class="token comment" spellcheck="true"># redis集群监控端口</span>    <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 拥有容器内命令执行的权限</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> /Users/sunan/docker/redis<span class="token punctuation">-</span>cluster/redis<span class="token punctuation">-</span>6392/conf/redis.conf<span class="token punctuation">:</span>/usr/local/etc/redis/redis.conf <span class="token comment" spellcheck="true">#配置文件目录映射到宿主机</span>      <span class="token punctuation">-</span> /Users/sunan/docker/redis<span class="token punctuation">-</span>cluster/redis<span class="token punctuation">-</span>6392/data<span class="token punctuation">:</span>/data    <span class="token key atrule">command</span><span class="token punctuation">:</span>      redis<span class="token punctuation">-</span>server /usr/local/etc/redis/redis.conf  <span class="token key atrule">redis-master3</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis<span class="token punctuation">:</span><span class="token number">5.0 </span><span class="token comment" spellcheck="true"># 基础镜像</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span><span class="token number">6393 </span><span class="token comment" spellcheck="true"># 容器名称</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always <span class="token comment" spellcheck="true"># 容器总是重新启动</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 映射端口，对外提供服务</span>      <span class="token punctuation">-</span> 6393<span class="token punctuation">:</span><span class="token number">6393 </span><span class="token comment" spellcheck="true"># redis的服务端口</span>      <span class="token punctuation">-</span> 16393<span class="token punctuation">:</span><span class="token number">16393 </span><span class="token comment" spellcheck="true"># redis集群监控端口</span>    <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 拥有容器内命令执行的权限</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> /Users/sunan/docker/redis<span class="token punctuation">-</span>cluster/redis<span class="token punctuation">-</span>6393/conf/redis.conf<span class="token punctuation">:</span>/usr/local/etc/redis/redis.conf <span class="token comment" spellcheck="true">#配置文件目录映射到宿主机</span>      <span class="token punctuation">-</span> /Users/sunan/docker/redis<span class="token punctuation">-</span>cluster/redis<span class="token punctuation">-</span>6393/data<span class="token punctuation">:</span>/data    <span class="token key atrule">command</span><span class="token punctuation">:</span>      redis<span class="token punctuation">-</span>server /usr/local/etc/redis/redis.conf  <span class="token key atrule">redis-master4</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis<span class="token punctuation">:</span><span class="token number">5.0 </span><span class="token comment" spellcheck="true"># 基础镜像</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span><span class="token number">6394 </span><span class="token comment" spellcheck="true"># 容器名称</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always <span class="token comment" spellcheck="true"># 容器总是重新启动</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 映射端口，对外提供服务</span>      <span class="token punctuation">-</span> 6394<span class="token punctuation">:</span><span class="token number">6394 </span><span class="token comment" spellcheck="true"># redis的服务端口</span>      <span class="token punctuation">-</span> 16394<span class="token punctuation">:</span><span class="token number">16394 </span><span class="token comment" spellcheck="true"># redis集群监控端口</span>    <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 拥有容器内命令执行的权限</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> /Users/sunan/docker/redis<span class="token punctuation">-</span>cluster/redis<span class="token punctuation">-</span>6394/conf/redis.conf<span class="token punctuation">:</span>/usr/local/etc/redis/redis.conf <span class="token comment" spellcheck="true">#配置文件目录映射到宿主机</span>      <span class="token punctuation">-</span> /Users/sunan/docker/redis<span class="token punctuation">-</span>cluster/redis<span class="token punctuation">-</span>6394/data<span class="token punctuation">:</span>/data    <span class="token key atrule">command</span><span class="token punctuation">:</span>      redis<span class="token punctuation">-</span>server /usr/local/etc/redis/redis.conf  <span class="token key atrule">redis-master5</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis<span class="token punctuation">:</span><span class="token number">5.0 </span><span class="token comment" spellcheck="true"># 基础镜像</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span><span class="token number">6395 </span><span class="token comment" spellcheck="true"># 容器名称</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always <span class="token comment" spellcheck="true"># 容器总是重新启动</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 映射端口，对外提供服务</span>      <span class="token punctuation">-</span> 6395<span class="token punctuation">:</span><span class="token number">6395 </span><span class="token comment" spellcheck="true"># redis的服务端口</span>      <span class="token punctuation">-</span> 16395<span class="token punctuation">:</span><span class="token number">16395 </span><span class="token comment" spellcheck="true"># redis集群监控端口</span>    <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 拥有容器内命令执行的权限</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> /Users/sunan/docker/redis<span class="token punctuation">-</span>cluster/redis<span class="token punctuation">-</span>6395/conf/redis.conf<span class="token punctuation">:</span>/usr/local/etc/redis/redis.conf <span class="token comment" spellcheck="true">#配置文件目录映射到宿主机</span>      <span class="token punctuation">-</span> /Users/sunan/docker/redis<span class="token punctuation">-</span>cluster/redis<span class="token punctuation">-</span>6395/data<span class="token punctuation">:</span>/data    <span class="token key atrule">command</span><span class="token punctuation">:</span>      redis<span class="token punctuation">-</span>server /usr/local/etc/redis/redis.conf  <span class="token key atrule">redis-master6</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis<span class="token punctuation">:</span><span class="token number">5.0 </span><span class="token comment" spellcheck="true"># 基础镜像</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span><span class="token number">6396 </span><span class="token comment" spellcheck="true"># 容器名称</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always <span class="token comment" spellcheck="true"># 容器总是重新启动</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 映射端口，对外提供服务</span>      <span class="token punctuation">-</span> 6396<span class="token punctuation">:</span><span class="token number">6396 </span><span class="token comment" spellcheck="true"># redis的服务端口</span>      <span class="token punctuation">-</span> 16396<span class="token punctuation">:</span><span class="token number">16396 </span><span class="token comment" spellcheck="true"># redis集群监控端口</span>    <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 拥有容器内命令执行的权限</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> /Users/sunan/docker/redis<span class="token punctuation">-</span>cluster/redis<span class="token punctuation">-</span>6396/conf/redis.conf<span class="token punctuation">:</span>/usr/local/etc/redis/redis.conf <span class="token comment" spellcheck="true">#配置文件目录映射到宿主机</span>      <span class="token punctuation">-</span> /Users/sunan/docker/redis<span class="token punctuation">-</span>cluster/redis<span class="token punctuation">-</span>6396/data<span class="token punctuation">:</span>/data    <span class="token key atrule">command</span><span class="token punctuation">:</span>      redis<span class="token punctuation">-</span>server /usr/local/etc/redis/redis.conf</code></pre><p>编写完成后使用<code>docker-compose up -d</code>启动容器。</p><blockquote><p>注：这里没有使用主机模式（host），而是使用 NAT 模式，因为主机模式可能导致外部客户端无法连接。</p></blockquote><h2 id="进入容器，创建集群"><a href="#进入容器，创建集群" class="headerlink" title="进入容器，创建集群"></a>进入容器，创建集群</h2><p>上面只是启动了 6 个 Redis 实例，并没有构建成 Cluster 集群。</p><p>执行<code>docker exec -it redis-6371 bash</code>进入一个 Redis 节点容器，随便哪个都行。</p><p>继续执行以下命令创建集群：</p><pre class=" language-shell"><code class="language-shell">#进入其中一个redis容器，docker宿主计IP为10.98.141.43#集群创建,执行初始化命令，这一步开始命令须在 redis5.0 及以上版本运行redis-cli -a 123456 --cluster create 10.98.141.43:6391 10.98.141.43:6392 10.98.141.43:6393 10.98.141.43:6394 10.98.141.43:6395 10.98.141.43:6396 --cluster-replicas 1# 执行过后会有以下输出Warning: Using a password with '-a' or '-u' option on the command line interface may not be safe.>>> Performing hash slots allocation on 6 nodes...Master[0] -> Slots 0 - 5460Master[1] -> Slots 5461 - 10922Master[2] -> Slots 10923 - 16383Adding replica 10.35.30.39:6375 to 10.35.30.39:6371Adding replica 10.35.30.39:6376 to 10.35.30.39:6372Adding replica 10.35.30.39:6374 to 10.35.30.39:6373>>> Trying to optimize slaves allocation for anti-affinity[WARNING] Some slaves are in the same host as their masterM: e9a35d6a9d203830556de89f06a3be2e2ab4eee1 10.35.30.39:6371   slots:[0-5460] (5461 slots) masterM: 0c8755144fe6a200a46716371495b04f8ab9d4c8 10.35.30.39:6372   slots:[5461-10922] (5462 slots) masterM: fcb83b0097d2a0a87a76c0d782de12147bc86291 10.35.30.39:6373   slots:[10923-16383] (5461 slots) masterS: b9819797e98fcd49f263cec1f77563537709bcb8 10.35.30.39:6374   replicates fcb83b0097d2a0a87a76c0d782de12147bc86291S: f4660f264f12786d81bcf0b18bc7287947ec8a1b 10.35.30.39:6375   replicates e9a35d6a9d203830556de89f06a3be2e2ab4eee1S: d2b9f265ef7dbb4a612275def57a9cc24eb2fd5d 10.35.30.39:6376   replicates 0c8755144fe6a200a46716371495b04f8ab9d4c8Can I set the above configuration? (type 'yes' to accept): yes # 这里输入 yes 并回车 确认节点 主从身份 以及 哈希槽的分配>>> Nodes configuration updated>>> Assign a different config epoch to each node>>> Sending CLUSTER MEET messages to join the clusterWaiting for the cluster to join.>>> Performing Cluster Check (using node 10.35.30.39:6371)M: e9a35d6a9d203830556de89f06a3be2e2ab4eee1 10.35.30.39:6371   slots:[0-5460] (5461 slots) master   1 additional replica(s)M: 0c8755144fe6a200a46716371495b04f8ab9d4c8 10.35.30.39:6372   slots:[5461-10922] (5462 slots) master   1 additional replica(s)S: b9819797e98fcd49f263cec1f77563537709bcb8 10.35.30.39:6374   slots: (0 slots) slave   replicates fcb83b0097d2a0a87a76c0d782de12147bc86291M: fcb83b0097d2a0a87a76c0d782de12147bc86291 10.35.30.39:6373   slots:[10923-16383] (5461 slots) master   1 additional replica(s)S: f4660f264f12786d81bcf0b18bc7287947ec8a1b 10.35.30.39:6375   slots: (0 slots) slave   replicates e9a35d6a9d203830556de89f06a3be2e2ab4eee1S: d2b9f265ef7dbb4a612275def57a9cc24eb2fd5d 10.35.30.39:6376   slots: (0 slots) slave   replicates 0c8755144fe6a200a46716371495b04f8ab9d4c8[OK] All nodes agree about slots configuration.>>> Check for open slots...>>> Check slots coverage...[OK] All 16384 slots covered.</code></pre><p>看到上面的输出即为 Cluster 集群配置完成。且为 3 主 3 从。</p><pre><code>#docker宿主计上也已安装redis-cli进入容器#执行下面名令，注意要加-c 代表集群模式，否则重定向时会出现 (error) MOVED 15588错误redis-cli -c  -h 10.98.141.43 -p 6391#连接成功则出现：0.98.141.43:6391&gt;# 输入密码0.98.141.43:6391&gt;auth &quot;123456&quot;#输入cluster nodes,出现下面信息则代表搭建成功0.98.141.43:6391&gt;cluster nodesb7d03824ae4c23ed6706323465e8263face24b2f 192.168.0.105:6395@16395 slave d845dc1b0f1354ce77b8ae671698e80eddfcce6f 0 1582518782773 5 connected704dc6e634c183b9368c868b75686fe9b765648b 192.168.0.105:6392@16392 master - 0 1582518783000 2 connected 5461-109228488b09fc576379b11cd692a0016a8a4ab0cdf42 192.168.0.105:6391@16391 myself,master - 0 1582518782000 1 connected 0-5460f5b2baca3411d8b7c86ca2c73d50c2bbc3e9ee3c 192.168.0.105:6394@16394 slave 704dc6e634c183b9368c868b75686fe9b765648b 0 1582518781000 4 connected85fe1b81c15917d776cd868c971d60812847db8b 192.168.0.105:6396@16396 slave 8488b09fc576379b11cd692a0016a8a4ab0cdf42 0 1582518783778 6 connectedd845dc1b0f1354ce77b8ae671698e80eddfcce6f 192.168.0.105:6393@16393 master - 0 1582518781767 3 connected 10923-16383#set 一个key为wl，你会发现会从定向到其他节点，自此大功告成192.168.0.105:6391&gt; set wl wzq-&gt; Redirected to slot [15588] located at 192.168.0.105:6393</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/09258.html"/>
      <url>/2021/09258.html</url>
      
        <content type="html"><![CDATA[<h2 id="RabbitMQ-Compose-配置文件"><a href="#RabbitMQ-Compose-配置文件" class="headerlink" title="RabbitMQ Compose 配置文件"></a>RabbitMQ Compose 配置文件</h2><p>创建一个 docker-compose.yml 内容如下：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3.1'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">image</span><span class="token punctuation">:</span> rabbitmq<span class="token punctuation">:</span>management    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> rabbitmq    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> rabbit    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 5672<span class="token punctuation">:</span><span class="token number">5672</span>      <span class="token punctuation">-</span> 15672<span class="token punctuation">:</span><span class="token number">15672</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token key atrule">TZ</span><span class="token punctuation">:</span> Asia/Shanghai      <span class="token key atrule">RABBITMQ_DEFAULT_USER</span><span class="token punctuation">:</span> rabbit      <span class="token key atrule">RABBITMQ_DEFAULT_PASS</span><span class="token punctuation">:</span> <span class="token number">123456</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./data<span class="token punctuation">:</span>/var/lib/rabbitmq      <span class="token punctuation">-</span> ./conf<span class="token punctuation">:</span>/etc/rabbitmq</code></pre><p>注意：<code>./conf</code>目录即配置挂载目录需事先创建好，如果未事先创建或是空文件夹启动时会报错。</p><p>可以先不挂载该目录启动，然后 通过 docker cp 命令将配置目录拷贝出来。</p><p>示例：</p><pre class=" language-shell"><code class="language-shell">docker cp rabbitmq:/etc/rabbitmq ./conf</code></pre><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>执行 <code>docker-compose up -d</code>命令启动。</p><p>浏览器访问 <a href="http://localhost:15672/">http://localhost:15672/</a> 进入RabbitMQ Management 页面。输入上面的用户名和密码登录。</p><p>页面如下：</p><p><img src="https://zys-img.oss-cn-beijing.aliyuncs.com/img/20210608172546.png" alt="RabbitMQ"></p><p><a href="https://zysite.top/archives/rabbitmq-docker-compose-install#NRwNZfJS">RabbitMQ Compose 配置文件</a><a href="https://zysite.top/archives/rabbitmq-docker-compose-install#cjmZRnaf">启动</a></p><blockquote><p><strong>Copyright:</strong> 采用 <a href="https://creativecommons.org/licenses/by/4.0/">知识共享署名4.0</a> 国际许可协议进行许可</p><p><strong>Links:</strong> <a href="https://zysite.top/archives/rabbitmq-docker-compose-install">https://zysite.top/archives/rabbitmq-docker-compose-install</a></p></blockquote><p><a href="https://zysite.top/tags/docker"># Docker</a><a href="https://zysite.top/tags/rabbitmq"># RabbitMQ</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/092515.html"/>
      <url>/2021/092515.html</url>
      
        <content type="html"><![CDATA[<h2 id="创建目录及配置文件"><a href="#创建目录及配置文件" class="headerlink" title="创建目录及配置文件"></a>创建目录及配置文件</h2><p>创建目录结构如下，之后用于挂载数据卷：</p><pre class=" language-shell"><code class="language-shell">├── master│   ├── conf│   └── data├── slaver0│   ├── conf│   └── data└── slaver1    ├── conf    └── data</code></pre><p>进入<code>./master/conf</code>目录，创建文件<code>vi my.cnf</code>，内容如下：</p><pre class=" language-shell"><code class="language-shell">[mysqld]# 集群服务器id，不可重复server-id = 1# 同步(binlog)文件名称log-bin = mysql-bin#注意mysql5.7以上会报错,解决办法参考问题1default_time_zone=Asia/Shanghai# 1055异常处理sql-mode="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO"#配置编码为utf8character_set_server=utf8mb4init_connect='SET NAMES utf8mb4'   #relay_log配置中继日志relay_log=edu-mysql-relay-bin  #设置mysql大小写不敏感lower_case_table_names=1   #开启二进制日志                  log-bin = mysql-bin    #需要复制的数据库名，如果复制多个数据库，重复设置这个选项即可，注释掉则默认全部               binlog-do-db = db   #忽略需要复制的数据库binlog-ignore-db=mysql  #将从服务器从主服务器收到的更新记入到从服务器自己的二进制日志文件中                 log-slave-updates                        #控制binlog的写入频率。每执行多少次事务写入一次(这个参数性能消耗很大，但可减小MySQL崩溃造成的损失) sync_binlog = 1  #为每个session分配的内存，在事物过程中用来存储二进制日志的缓存binlog_cache_log=1M                  #这个参数一般用在主主同步中，用来错开自增值, 防止键值冲突auto_increment_offset = 1           #这个参数一般用在主主同步中，用来错开自增值, 防止键值冲突auto_increment_increment = 1            #二进制日志自动删除的天数，默认值为0,表示“没有自动删除”，启动时和二进制日志循环时可能删除  expire_logs_days = 7                    #将函数复制到slave  log_bin_trust_function_creators = true</code></pre><p>进入<code>./slaver0/conf</code>目录，创建文件<code>vi my.cnf</code>，内容如下：</p><pre class=" language-shell"><code class="language-shell">[mysqld]# 集群服务器id，不可重复server-id = 11#注意mysql5.7以上会报错,解决办法参考问题1default_time_zone=Asia/Shanghai# 1055异常处理sql-mode="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO"#配置编码为utf8character_set_server=utf8mb4init_connect='SET NAMES utf8mb4' #relay_log配置中继日志relay_log=edu-mysql-relay-bin  #设置mysql大小写不敏感lower_case_table_names=1   #开启二进制日志                  log-bin = mysql-bin    #需要复制的数据库名，如果复制多个数据库，重复设置这个选项即可，注释掉则默认全部               binlog-do-db = db   #忽略需要复制的数据库binlog-ignore-db=mysql  #将从服务器从主服务器收到的更新记入到从服务器自己的二进制日志文件中                 log-slave-updates                        #控制binlog的写入频率。每执行多少次事务写入一次(这个参数性能消耗很大，但可减小MySQL崩溃造成的损失) sync_binlog = 1  #为每个session分配的内存，在事物过程中用来存储二进制日志的缓存binlog_cache_log=1M                  #这个参数一般用在主主同步中，用来错开自增值, 防止键值冲突auto_increment_offset = 1           #这个参数一般用在主主同步中，用来错开自增值, 防止键值冲突auto_increment_increment = 1            #二进制日志自动删除的天数，默认值为0,表示“没有自动删除”，启动时和二进制日志循环时可能删除  expire_logs_days = 7                    #将函数复制到slave  log_bin_trust_function_creators = true</code></pre><p>进入<code>./slaver1/conf</code>目录，创建文件<code>vi my.cnf</code>，内容如下：</p><pre class=" language-shell"><code class="language-shell">[mysqld]# 集群服务器id，不可重复server-id = 12#注意mysql5.7以上会报错,解决办法参考问题1default_time_zone=Asia/Shanghai# 1055异常处理sql-mode="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO"#配置编码为utf8character_set_server=utf8mb4init_connect='SET NAMES utf8mb4'   #relay_log配置中继日志relay_log=edu-mysql-relay-bin  #设置mysql大小写不敏感lower_case_table_names=1   #开启二进制日志                  log-bin = mysql-bin    #需要复制的数据库名，如果复制多个数据库，重复设置这个选项即可，注释掉则默认全部               binlog-do-db = db   #忽略需要复制的数据库binlog-ignore-db=mysql  #将从服务器从主服务器收到的更新记入到从服务器自己的二进制日志文件中                 log-slave-updates                        #控制binlog的写入频率。每执行多少次事务写入一次(这个参数性能消耗很大，但可减小MySQL崩溃造成的损失) sync_binlog = 1  #为每个session分配的内存，在事物过程中用来存储二进制日志的缓存binlog_cache_log=1M                  #这个参数一般用在主主同步中，用来错开自增值, 防止键值冲突auto_increment_offset = 1           #这个参数一般用在主主同步中，用来错开自增值, 防止键值冲突auto_increment_increment = 1            #二进制日志自动删除的天数，默认值为0,表示“没有自动删除”，启动时和二进制日志循环时可能删除  expire_logs_days = 7                    #将函数复制到slave  log_bin_trust_function_creators = true</code></pre><p>问题1:解决增加时区报错解决方法</p><pre><code>到https://dev.mysql.com/downloads/timezones.html下载时区文件如果你的mysql版本是5.7及以下，下载上图第一个红框中的文件如果你的mysql是5.7以上，下载上图第二个红框中的文件timezone_2021a_posix_sql.zip上传到服务器,进行解压mysql -u root -p密码use mysql;source 路径\timezone_posix.sql然后执行语句SET GLOBAL time_zone = &#39;Asia/Shanghai&#39;;</code></pre><h2 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h2><p>创建<code>docker-compose.yml</code>文件，内容如下：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 主库</span>  <span class="token key atrule">mysql-master</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">"mysql:5.7"</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"3306:3306"</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>master    <span class="token key atrule">environment</span><span class="token punctuation">:</span>       <span class="token key atrule">MYSQL_ROOT_PASSWORD</span><span class="token punctuation">:</span> <span class="token number">123456</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./master/conf/my.cnf<span class="token punctuation">:</span>/etc/mysql/conf.d/mysql.cnf      <span class="token punctuation">-</span> ./master/data<span class="token punctuation">:</span>/var/lib/mysql  <span class="token comment" spellcheck="true"># 从库0</span>  <span class="token key atrule">mysql-slaver0</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">"mysql:5.7"</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"3307:3306"</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>slaver0    <span class="token key atrule">environment</span><span class="token punctuation">:</span>       <span class="token key atrule">MYSQL_ROOT_PASSWORD</span><span class="token punctuation">:</span> <span class="token number">123456</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./slaver0/conf/my.cnf<span class="token punctuation">:</span>/etc/mysql/conf.d/mysql.cnf      <span class="token punctuation">-</span> ./slaver0/data<span class="token punctuation">:</span>/var/lib/mysql  <span class="token comment" spellcheck="true"># 从库1</span>  <span class="token key atrule">mysql-slaver1</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">"mysql:5.7"</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"3308:3306"</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>slaver1    <span class="token key atrule">environment</span><span class="token punctuation">:</span>       <span class="token key atrule">MYSQL_ROOT_PASSWORD</span><span class="token punctuation">:</span> <span class="token number">123456</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./slaver1/conf/my.cnf<span class="token punctuation">:</span>/etc/mysql/conf.d/mysql.cnf      <span class="token punctuation">-</span> ./slaver1/data<span class="token punctuation">:</span>/var/lib/mysql</code></pre><p>运行<code>docker-compose up -d</code>启动容器。</p><h2 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h2><h3 id="主库"><a href="#主库" class="headerlink" title="主库"></a>主库</h3><p><code>docker exec -it mysql-master bash</code>进入主库，<code>mysql -u root -p 123456</code>进入<code>mysql</code>：</p><p>创建用户 <code>slaver</code>作为从库同步主库数据时的用户：</p><pre class=" language-shell"><code class="language-shell">create user 'slave'@'%' identified by '123456';</code></pre><p>授予权限：</p><pre class=" language-shell"><code class="language-shell">grant replication slave on *.* to 'slave'@'%';</code></pre><p>刷新权限：</p><pre class=" language-shell"><code class="language-shell">flush privileges;</code></pre><p>查看<code>binlog</code>相关配置：</p><pre class=" language-shell"><code class="language-shell">show global variables like 'binlog%';mysql> show global variables like 'binlog%';+--------------------------------------------+--------------+| Variable_name                              | Value        |+--------------------------------------------+--------------+| binlog_cache_size                          | 32768        || binlog_checksum                            | CRC32        || binlog_direct_non_transactional_updates    | OFF          || binlog_error_action                        | ABORT_SERVER || binlog_format                              | ROW          || binlog_group_commit_sync_delay             | 0            || binlog_group_commit_sync_no_delay_count    | 0            || binlog_gtid_simple_recovery                | ON           || binlog_max_flush_queue_time                | 0            || binlog_order_commits                       | ON           || binlog_row_image                           | FULL         || binlog_rows_query_log_events               | OFF          || binlog_stmt_cache_size                     | 32768        || binlog_transaction_dependency_history_size | 25000        || binlog_transaction_dependency_tracking     | COMMIT_ORDER |+--------------------------------------------+--------------+15 rows in set (0.01 sec)</code></pre><p>查看 <code>server</code> 相关配置：</p><pre class=" language-shell"><code class="language-shell">show global variables like 'server%';mysql> show global variables like 'server%';+----------------+--------------------------------------+| Variable_name  | Value                                |+----------------+--------------------------------------+| server_id      | 1                                    || server_id_bits | 32                                   || server_uuid    | 25410417-5643-11eb-9ef1-0242ac130005 |+----------------+--------------------------------------+3 rows in set (0.00 sec)</code></pre><p>查看主库状态：</p><pre class=" language-shell"><code class="language-shell">show master status;mysql> show master status;+------------------+----------+--------------+------------------+-------------------+| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |+------------------+----------+--------------+------------------+-------------------+| mysql-bin.000001 |      154 |              |                  |                   |+------------------+----------+--------------+------------------+-------------------+1 row in set (0.00 sec)</code></pre><h3 id="从库"><a href="#从库" class="headerlink" title="从库"></a>从库</h3><p>连接从库<code>mysql-slaver0</code>：<br><code>docker exec -it mysql-slave0 bash</code>进入主库，<code>mysql -u root -p 123456</code>进入<code>mysql</code>：</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 设置 master 连接参数</span><span class="token comment" spellcheck="true">#master_host ：Master的地址，指的是容器的独立ip,可以通过docker inspect --format='&amp;#123;&amp;#123;.NetworkSettings.IPAddress&amp;#125;&amp;#125;' 容器名称|容器id查询容器的ip</span>change master <span class="token keyword">to</span> master_host<span class="token operator">=</span><span class="token string">'172.17.0.1'</span><span class="token punctuation">,</span> master_user<span class="token operator">=</span><span class="token string">'slave'</span><span class="token punctuation">,</span> master_password<span class="token operator">=</span><span class="token string">'123456'</span><span class="token punctuation">,</span> master_port<span class="token operator">=</span><span class="token number">13306</span><span class="token punctuation">,</span>  master_log_file<span class="token operator">=</span><span class="token string">'mysql-bin.000008'</span><span class="token punctuation">,</span>master_log_pos<span class="token operator">=</span><span class="token number">154</span><span class="token punctuation">;</span> change master <span class="token keyword">to</span>     master_host<span class="token operator">=</span><span class="token string">'172.17.0.1'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 主库的docker IP，ip addr  查看 docker的ip</span>    master_user<span class="token operator">=</span><span class="token string">'slaver'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># 主库同步的用户</span>    master_password<span class="token operator">=</span><span class="token string">'123456'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 密码</span>    master_port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 主库的端口</span>    master_log_file<span class="token operator">=</span><span class="token string">'mysql-bin.000001'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 同步的文件 通过show master status来获取</span>    master_log_pos<span class="token operator">=</span><span class="token number">154</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true"># 开始从第几行同步 通过show master status来获取</span>    <span class="token comment" spellcheck="true"># 启动同步</span><span class="token keyword">start</span> slave<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 查看 slave 状态</span><span class="token keyword">show</span> slave <span class="token keyword">status</span> \G<span class="token punctuation">;</span> <span class="token comment" spellcheck="true"># 看到 Slave_IO_Running 和 Slave_SQL_Running 都为 Yes 即为配置成功</span>注意：因同一个主机使用docker连接不成功，所以需要关闭防火墙service firewalld stop重启时不会再启动防火墙systemctl <span class="token keyword">disable</span> firewalld<span class="token punctuation">.</span>service主从同步遇到 Got fatal error <span class="token number">1236</span> <span class="token keyword">from</span> master <span class="token keyword">when</span> reading <span class="token keyword">data</span> <span class="token keyword">from</span> <span class="token keyword">binary</span> log: 'Could <span class="token operator">not</span> find <span class="token keyword">first</span> log<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>首先遇到这个是因为binlog位置索引处的问题，不要reset slave；reset slave会将主从同步的文件以及位置恢复到初始状态，一开始没有数据还好，有数据的话，相当于重新开始同步，可能会出现一些问题；一般做主从同步，都是要求以后的数据实现主从同步，而对于旧的数据完全可以使用数据库同步工具先将数据库同步，完了再进行主从同步；好了遇到上面的问题，正确做法是：<span class="token number">1</span><span class="token punctuation">.</span>打开主服务器，进入mysql<span class="token number">2</span><span class="token punctuation">.</span>执行flush logs；<span class="token comment" spellcheck="true">//这时主服务器会重新创建一个binlog文件；</span><span class="token number">3</span><span class="token punctuation">.</span>在主服务上执行<span class="token keyword">show</span> master <span class="token keyword">status</span> \G<span class="token punctuation">;</span>显示如下：<span class="token number">4</span><span class="token punctuation">.</span>来到从服务器的mysql；<span class="token number">5</span><span class="token punctuation">.</span>stop slave<span class="token punctuation">;</span><span class="token number">6</span><span class="token punctuation">.</span>change master <span class="token keyword">to</span> master_log_file<span class="token operator">=</span><span class="token string">'mysql-bin.000012'</span><span class="token punctuation">,</span>master_log_pos<span class="token operator">=</span><span class="token number">154</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里的file和pos都是上面主服务器master显示的。</span><span class="token number">7</span><span class="token punctuation">.</span><span class="token keyword">start</span> slave<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这时候就应可以了</span><span class="token number">8</span><span class="token punctuation">.</span><span class="token keyword">show</span> slave <span class="token keyword">status</span> \G<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结果如下：</span></code></pre><p>对从库<code>mysql-slaver1</code>做相同操作。</p><p>还可以使用<code>stop slave;</code>停止同步。</p><h2 id="binlog-模式"><a href="#binlog-模式" class="headerlink" title="binlog 模式"></a>binlog 模式</h2><p>前面通过<code>show global variables like &#39;binlog%&#39;;</code>命令可以看到<code>binlog_format </code>为<code>ROW</code>。</p><p><code>binlog</code>有以下三种模式：</p><ul><li><p><code>ROW</code>：每条记录的修改都会被记录。</p><p>优点：不存在数据不一致的情况。</p><p>缺点：一旦修改表结构( alter table) 会出现 binlog 暴涨现象。</p></li><li><p><code>STATEMENT</code>：每执行一条导致值变化的 sql 就会记录到 binlog 中。</p><p>优点： 仅仅记录了SQL，不会记录执行结果，减少了 binlog 日志量，节约了 IO，提高了性能</p><p>缺点：会出现数据不一致的情况。</p></li><li><p><code>MIXED</code>：以上两种模式混合使用。</p></li></ul><p>我们可以通过编辑<code>./master/conf/my.cnf</code>文件，添加一行<code>binlog_format = MIXED</code>来修改<code>binlog</code>模式。</p><h2 id="MySQL-主从同步原理"><a href="#MySQL-主从同步原理" class="headerlink" title="MySQL 主从同步原理"></a>MySQL 主从同步原理</h2><p>主从同步原理图：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/9adf4321bce1c35dae6c304b3fa7aa75.png" alt="mysql主从同步原理图"></p><p>MySQL 默认的复制方式是<code>异步</code>的，主库把日志发送给从库后不关心从库是否已经处理，这样会产生一个问题就是假设主库挂了，从库处理失败了，这时候从库升为主库后，日志就丢失了。可以根据情况调整同步策略：</p><ul><li>全同步复制：主库写入 binlog 后强制同步日志到从库，<code>所有的从库</code>都执行完成后才返回给客户端。性能会受到严重影响。</li><li>半同步复制：从库写入日志成功后返回 ACK 确认给主库，主库收到至少一个从库的确认就认为写操作完成。</li></ul><blockquote><p>主从延迟：主库与从库之间数据同步肯定是有延时的（网络）。解决方案是：部分查询强制走主库，主库肯定是最新的数据。</p></blockquote><h1 id="Docker构建Mycat（单节点）"><a href="#Docker构建Mycat（单节点）" class="headerlink" title="Docker构建Mycat（单节点）"></a><a href="https://www.cnblogs.com/myitnews/p/12380074.html">Docker构建Mycat（单节点）</a></h1><p>Mycat是使用 JAVA 语言进行编写开发，使用前需要先安装 JAVA 运行环境(JRE),由于 MyCAT 中使用了JDK7 中的一些特性，所以要求必须在 JDK7 以上的版本上运行。</p><p>Mycat支持多种数据库接入，如：MySQL、SQLServer、Oracle、MongoDB 等，推荐使用MySQL 做集群。</p><p><strong>1. 创建Mycat配置文件夹</strong></p><pre><code>mkdir /usr/local/mycatmkdir /usr/local/mycat/conf</code></pre><p><strong>2. 创建docker文件夹</strong></p><pre><code>mkdir /usr/local/docker/mycat/cd /usr/local/docker/mycat</code></pre><p><strong>3. 下载mycat安装包</strong></p><pre><code>wget http://dl.mycat.io/1.6.6.1/Mycat-server-1.6.6.1-release-20181031195535-linux.tar.gzmv Mycat-server-1.6.6.1-release-20181031195535-linux.tar.gz mycat.tar.gz</code></pre><p><strong>4. 解压并复制文件</strong></p><pre><code>tar -zxvf mycat.tar.gzcp -r mycat/conf/ /usr/local/mycat</code></pre><p><strong>5. 创建Dockerfile文件（在mycat压缩包所在目录）</strong></p><pre><code>#基于openjdk:8 创建镜像,#如果是基于centos或其他的，必须保证已安装了JDK，否则就需要在Dockerfile文件中也ADD进来FROM openjdk:8#将宿主机目录下的文件拷贝进镜像且ADD命令会自动处理URL和解压tar压缩包#将mycat解压到/usr/local目录中,得到 /usr/local/mycatADD mycat.tar.gz /usr/local#容器数据卷，用于数据保存和持久化工作#将mycat的配置文件的地址暴露出映射地址,启动时直接映射宿主机的文件夹VOLUME /usr/local/mycatWORKDIR /usr/local/mycat#用来在构建镜像过程中设置环境变量ENV MYCAT_HOME=/usr/local/mycat#暴露出MyCat的所需端口EXPOSE 8066 9066#以前台进程的方式启动MyCat服务CMD [&quot;/usr/local/mycat/bin/mycat&quot;, &quot;console&quot;,&quot;&amp;&quot;]</code></pre><p><strong>6. 构建镜像</strong></p><pre><code># 注意最后还有 .docker build -t mycat-1.6.6.1 .</code></pre><p><strong>7. 启动容器</strong></p><pre><code>#容器券：-v /usr/local/mycat/conf/:/usr/local/mycat/conf/#冒号前是本机路径，冒号后是容器内的目录路径#创建多个容器卷，尤其是配置文件和日志docker run --name mycat -p 8066:8066 -p 9066:9066 -v /usr/local/mycat/conf/:/usr/local/mycat/conf/ -v /usr/local/mycat/logs/:/usr/local/mycat/logs/ -d mycat-1.6.6.1</code></pre><p>注：为了确定容器券设置是否有效，可以在本机的目录下改下配置文件，进入容器内查看文件是否改变，如果一致，则设置成功。</p><p>防火墙设置，需要开放mycat的连接端口8066和管理端口9066。</p><p><strong>8. 进入容器和退出容器</strong></p><pre><code># 进入容器docker exec -it 1b652326460e /bin/bash# 两种退出方式# 第一种：容器停止退出，在容器终端输入exit# 第二种：容器不停止退出，在容器终端按Ctrl+P+Q</code></pre><p><strong>9. 配置</strong></p><p>编辑/usr/local/mycat/conf/目录下的server.xml,schema.xml等配置文件。</p><p>修改server.xml文件</p><pre><code># 进入容器&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!-- - - Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);  - you may not use this file except in compliance with the License. - You  may obtain a copy of the License at - - http://www.apache.org/licenses/LICENSE-2.0  - - Unless required by applicable law or agreed to in writing, software -  distributed under the License is distributed on an &quot;AS IS&quot; BASIS, - WITHOUT  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. - See the  License for the specific language governing permissions and - limitations under the License. --&gt;&lt;!DOCTYPE mycat:server SYSTEM &quot;server.dtd&quot;&gt;&lt;mycat:server xmlns:mycat=&quot;http://org.opencloudb/&quot;&gt;&lt;system&gt;&lt;property name=&quot;defaultSqlParser&quot;&gt;druidparser&lt;/property&gt;&lt;property name=&quot;charset&quot;&gt;utf8mb4&lt;/charset&gt;      &lt;!--  &lt;property name=&quot;useCompression&quot;&gt;1&lt;/property&gt;--&gt; &lt;!--1为开启mysql压缩协议--&gt;&lt;!-- &lt;property name=&quot;processorBufferChunk&quot;&gt;40960&lt;/property&gt; --&gt; &lt;!--  &lt;property name=&quot;processors&quot;&gt;1&lt;/property&gt;  &lt;property name=&quot;processorExecutor&quot;&gt;32&lt;/property&gt; --&gt;&lt;!--默认是65535 64K 用于sql解析时最大文本长度 --&gt;&lt;!--&lt;property name=&quot;maxStringLiteralLength&quot;&gt;65535&lt;/property&gt;--&gt;&lt;!--&lt;property name=&quot;sequnceHandlerType&quot;&gt;0&lt;/property&gt;--&gt;&lt;!--&lt;property name=&quot;backSocketNoDelay&quot;&gt;1&lt;/property&gt;--&gt;&lt;!--&lt;property name=&quot;frontSocketNoDelay&quot;&gt;1&lt;/property&gt;--&gt;&lt;!--&lt;property name=&quot;processorExecutor&quot;&gt;16&lt;/property&gt;--&gt;  &lt;!-- &lt;property name=&quot;mutiNodeLimitType&quot;&gt;1&lt;/property&gt; 0：开启小数量级（默认） ；1：开启亿级数据排序&lt;property name=&quot;mutiNodePatchSize&quot;&gt;100&lt;/property&gt; 亿级数量排序批量   &lt;property name=&quot;processors&quot;&gt;32&lt;/property&gt; &lt;property name=&quot;processorExecutor&quot;&gt;32&lt;/property&gt;    &lt;property name=&quot;serverPort&quot;&gt;8066&lt;/property&gt; &lt;property name=&quot;managerPort&quot;&gt;9066&lt;/property&gt;    &lt;property name=&quot;idleTimeout&quot;&gt;300000&lt;/property&gt; &lt;property name=&quot;bindIp&quot;&gt;0.0.0.0&lt;/property&gt; &lt;property name=&quot;frontWriteQueueSize&quot;&gt;4096&lt;/property&gt; &lt;property name=&quot;processors&quot;&gt;32&lt;/property&gt; --&gt;&lt;/system&gt;&lt;!--#注：配置写入用户和数据库，这里配置的数据库名为sky(schema中配置的虚拟数据库名字)，生产环境根据实际情况配置，多个库用逗号隔开。--&gt;&lt;user name=&quot;root&quot;&gt;&lt;property name=&quot;password&quot;&gt;123456&lt;/property&gt;&lt;property name=&quot;schemas&quot;&gt;sky&lt;/property&gt;&lt;/user&gt;&lt;!--#下面配置只读用户和数据库。--&gt;&lt;user name=&quot;dev&quot;&gt;&lt;property name=&quot;password&quot;&gt;123456&lt;/property&gt;&lt;property name=&quot;schemas&quot;&gt;sky&lt;/property&gt;&lt;property name=&quot;readOnly&quot;&gt;true&lt;/property&gt;&lt;/user&gt;&lt;/mycat:server&gt;</code></pre><p>schema.xml的配置如下：</p><pre><code>&lt;?xml version=&quot;1.0&quot;?&gt;   &lt;!DOCTYPE mycat:schema SYSTEM &quot;schema.dtd&quot;&gt;    &lt;mycat:schema xmlns:mycat=&quot;http://org.opencloudb/&quot; &gt;                &lt;schema name=&quot;sky&quot; checkSQLschema=&quot;true&quot; sqlMaxLimit=&quot;100&quot;&gt;                    &lt;table name=&quot;travelrecord&quot; dataNode=&quot;dn1&quot; rule=&quot;auto-sharding-long&quot; /&gt;            &lt;/schema&gt;            &lt;dataNode name=&quot;dn1&quot; dataHost=&quot;ieshost&quot; database=&quot;mydb&quot; /&gt;           &lt;dataHost name=&quot;ieshost&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;3&quot;                  writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;jdbc&quot; switchType=&quot;1&quot;  slaveThreshold=&quot;100&quot;&gt;                   &lt;heartbeat&gt;select user()&lt;/heartbeat&gt;                  &lt;writeHost host=&quot;master&quot; url=&quot;jdbc:mysql://172.17.0.1:13306?useSSL=false&amp;amp;characterEncoding=utf8&amp;amp;serverTimezone=GMT%2B8&quot; user=&quot;root    &quot;                           password=&quot;123456&quot;&gt;                         &lt;readHost host=&quot;slave&quot; url=&quot;jdbc:mysql://192.168.1.253:3340?useSSL=false&amp;amp;characterEncoding=utf8&amp;amp;serverTimezone=GMT%2B8&quot; user =&quot;dev&quot; password=&quot;123456&quot; /&gt;                  &lt;/writeHost&gt;                 &lt;writeHost host=&quot;slave&quot; url=&quot;jdbc:mysql://192.168.1.253:3339?useSSL=false&amp;amp;characterEncoding=utf8&amp;amp;serverTimezone=GMT%2B8&quot; user=&quot;dev&quot;                          password=&quot;123456&quot; /&gt;          &lt;/dataHost&gt;  &lt;/mycat:schema&gt;</code></pre><p>更多详细的配置请看：</p><p><a href="https://www.cnblogs.com/myitnews/p/12380197.html">Mycat的server.xml配置</a></p><p><a href="https://www.cnblogs.com/myitnews/p/12380422.html">Mycat的schema.xml配置</a></p><p><strong>10. Navicat连接</strong></p><p><a href="https://img2018.cnblogs.com/i-beta/660329/202002/660329-20200229110411161-675446138.png"><img src="https://img2018.cnblogs.com/i-beta/660329/202002/660329-20200229110411161-675446138.png" alt="img"></a></p><p><a href="https://img2018.cnblogs.com/i-beta/660329/202002/660329-20200229110100376-77413683.png"><img src="https://img2018.cnblogs.com/i-beta/660329/202002/660329-20200229110100376-77413683.png" alt="img"></a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/09257.html"/>
      <url>/2021/09257.html</url>
      
        <content type="html"><![CDATA[<p>docker-compose部署ElasticSearch集群</p><p><img src="https://zysite.top/upload/2021/04/logo-775ee8592a6b4875aa483a982c0be3c0.jpg" alt="img">81 次访问发布: 2021-06-16</p><p> <a href="https://zysite.top/categories/docker">· Docker</a></p><h2 id="Elasticsearch-Compose-配置文件"><a href="#Elasticsearch-Compose-配置文件" class="headerlink" title="Elasticsearch Compose 配置文件"></a>Elasticsearch Compose 配置文件</h2><p>创建一个 docker-compose.yml 内容如下：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'2.2'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">es01</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> docker.elastic.co/elasticsearch/elasticsearch<span class="token punctuation">:</span>7.10.1    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> es01    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> node.name=es01      <span class="token punctuation">-</span> cluster.name=es<span class="token punctuation">-</span>docker<span class="token punctuation">-</span>cluster      <span class="token punctuation">-</span> discovery.seed_hosts=es02<span class="token punctuation">,</span>es03      <span class="token punctuation">-</span> cluster.initial_master_nodes=es01<span class="token punctuation">,</span>es02<span class="token punctuation">,</span>es03      <span class="token punctuation">-</span> bootstrap.memory_lock=true      <span class="token punctuation">-</span> <span class="token string">"ES_JAVA_OPTS=-Xms512m -Xmx512m"</span>    <span class="token key atrule">ulimits</span><span class="token punctuation">:</span>      <span class="token key atrule">memlock</span><span class="token punctuation">:</span>        <span class="token key atrule">soft</span><span class="token punctuation">:</span> <span class="token number">-1</span>        <span class="token key atrule">hard</span><span class="token punctuation">:</span> <span class="token number">-1</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./es01/data<span class="token punctuation">:</span>/usr/share/elasticsearch/data    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 9200<span class="token punctuation">:</span><span class="token number">9200</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> elastic  <span class="token key atrule">es02</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> docker.elastic.co/elasticsearch/elasticsearch<span class="token punctuation">:</span>7.10.1    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> es02    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> node.name=es02      <span class="token punctuation">-</span> cluster.name=es<span class="token punctuation">-</span>docker<span class="token punctuation">-</span>cluster      <span class="token punctuation">-</span> discovery.seed_hosts=es01<span class="token punctuation">,</span>es03      <span class="token punctuation">-</span> cluster.initial_master_nodes=es01<span class="token punctuation">,</span>es02<span class="token punctuation">,</span>es03      <span class="token punctuation">-</span> bootstrap.memory_lock=true      <span class="token punctuation">-</span> <span class="token string">"ES_JAVA_OPTS=-Xms512m -Xmx512m"</span>    <span class="token key atrule">ulimits</span><span class="token punctuation">:</span>      <span class="token key atrule">memlock</span><span class="token punctuation">:</span>        <span class="token key atrule">soft</span><span class="token punctuation">:</span> <span class="token number">-1</span>        <span class="token key atrule">hard</span><span class="token punctuation">:</span> <span class="token number">-1</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./es02/data<span class="token punctuation">:</span>/usr/share/elasticsearch/data    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> elastic  <span class="token key atrule">es03</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> docker.elastic.co/elasticsearch/elasticsearch<span class="token punctuation">:</span>7.10.1    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> es03    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> node.name=es03      <span class="token punctuation">-</span> cluster.name=es<span class="token punctuation">-</span>docker<span class="token punctuation">-</span>cluster      <span class="token punctuation">-</span> discovery.seed_hosts=es01<span class="token punctuation">,</span>es02      <span class="token punctuation">-</span> cluster.initial_master_nodes=es01<span class="token punctuation">,</span>es02<span class="token punctuation">,</span>es03      <span class="token punctuation">-</span> bootstrap.memory_lock=true      <span class="token punctuation">-</span> <span class="token string">"ES_JAVA_OPTS=-Xms512m -Xmx512m"</span>    <span class="token key atrule">ulimits</span><span class="token punctuation">:</span>      <span class="token key atrule">memlock</span><span class="token punctuation">:</span>        <span class="token key atrule">soft</span><span class="token punctuation">:</span> <span class="token number">-1</span>        <span class="token key atrule">hard</span><span class="token punctuation">:</span> <span class="token number">-1</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./es03/data<span class="token punctuation">:</span>/usr/share/elasticsearch/data    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> elastic  <span class="token key atrule">kib01</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> docker.elastic.co/kibana/kibana<span class="token punctuation">:</span>7.10.1    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> kib01    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 5601<span class="token punctuation">:</span><span class="token number">5601</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token key atrule">ELASTICSEARCH_URL</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//es01<span class="token punctuation">:</span><span class="token number">9200</span>      <span class="token key atrule">ELASTICSEARCH_HOSTS</span><span class="token punctuation">:</span> <span class="token string">'["http://es01:9200","http://es02:9200","http://es03:9200"]'</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> elastic<span class="token key atrule">volumes</span><span class="token punctuation">:</span>  <span class="token key atrule">data01</span><span class="token punctuation">:</span>    <span class="token key atrule">driver</span><span class="token punctuation">:</span> local  <span class="token key atrule">data02</span><span class="token punctuation">:</span>    <span class="token key atrule">driver</span><span class="token punctuation">:</span> local  <span class="token key atrule">data03</span><span class="token punctuation">:</span>    <span class="token key atrule">driver</span><span class="token punctuation">:</span> local<span class="token key atrule">networks</span><span class="token punctuation">:</span>  <span class="token key atrule">elastic</span><span class="token punctuation">:</span>    <span class="token key atrule">driver</span><span class="token punctuation">:</span> bridge</code></pre><p>事先创建如下数据挂载目录：</p><pre class=" language-shell"><code class="language-shell">├── es01│   └── data├── es02│   └── data└── es03    └── data</code></pre><p>并且设置权限：</p><pre class=" language-shell"><code class="language-shell">chmod -R 777 es01 es02 es03</code></pre><p>执行 <code>docker-compose up -d</code>启动。</p><h2 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h2><h3 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h3><p>报错如下：</p><pre class=" language-shell"><code class="language-shell">AccessDeniedException[/usr/share/elasticsearch/data/nodes]</code></pre><p>提前将挂载目录创建好，并将权限设置好：</p><pre class=" language-shell"><code class="language-shell">chmod -R 777 es01 es02 es03</code></pre><h3 id="内存不足"><a href="#内存不足" class="headerlink" title="内存不足"></a>内存不足</h3><p>报错如下：</p><pre class=" language-shell"><code class="language-shell">max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</code></pre><p>修改配置文件：</p><pre class=" language-shell"><code class="language-shell">vi /etc/sysctl.conf</code></pre><p>在文件末尾添加一行内容：</p><pre class=" language-shell"><code class="language-shell">vm.max_map_count=262144</code></pre><p>执行以下命令立即生效：</p><pre class=" language-shell"><code class="language-shell">/sbin/sysctl -p</code></pre><p>之后重新启动即可。</p><p><a href="https://zysite.top/archives/elasticsearch-docker-compose-install#thJDAbSF">Elasticsearch Compose 配置文件</a><a href="https://zysite.top/archives/elasticsearch-docker-compose-install#MWZcQHbh">错误</a><a href="https://zysite.top/archives/elasticsearch-docker-compose-install#jcQDmkft">文件权限</a><a href="https://zysite.top/archives/elasticsearch-docker-compose-install#DSfGQZYj">内存不足</a></p><blockquote><p><strong>Copyright:</strong> 采用 <a href="https://creativecommons.org/licenses/by/4.0/">知识共享署名4.0</a> 国际许可协议进行许可</p><p><strong>Links:</strong> <a href="https://zysite.top/archives/elasticsearch-docker-compose-install">https://zysite.top/archives/elasticsearch-docker-compose-install</a></p></blockquote><p><a href="https://zysite.top/tags/docker"># Docker</a><a href="https://zysite.top/tags/elasticsearch"># Elasticsearch</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/09254.html"/>
      <url>/2021/09254.html</url>
      
        <content type="html"><![CDATA[<p>docker-compose安装Kafka集群</p><p><img src="https://zysite.top/upload/2021/04/logo-775ee8592a6b4875aa483a982c0be3c0.jpg" alt="img">58 次访问发布: 2021-04-10最后编辑: 2021-04-11</p><p> <a href="https://zysite.top/categories/docker">· Docker </a><a href="https://zysite.top/categories/kafka">· Kafka</a></p><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>由于 Kafka 借助 ZooKeeper 进行数据同步，所以安装 Kafka 集群时，需先安装 ZooKeeper 集群。</p><p>为了降低耦合，分别安装 ZooKeeper 集群和 Kafka 集群，然后通过配置在同一个 Docker 网络中保证 Kafka 能和 ZooKeeper 正常通信。</p><p>首先通过<code>docker network create zookeeper_network</code>命令创建一个名为<code>zookeeper_network</code>的 Docker 网络。</p><h2 id="ZooKeeper-Compose-配置文件"><a href="#ZooKeeper-Compose-配置文件" class="headerlink" title="ZooKeeper Compose 配置文件"></a>ZooKeeper Compose 配置文件</h2><p>创建一个 docker-compose.yml 文件，内容如下：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3.1'</span><span class="token key atrule">networks</span><span class="token punctuation">:</span>  <span class="token key atrule">default</span><span class="token punctuation">:</span>    <span class="token key atrule">external</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> zookeeper_network<span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">zoo1</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> zookeeper    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> zoo1    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> zoo1    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 2181<span class="token punctuation">:</span><span class="token number">2181</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"./zoo1/data:/data"</span>      <span class="token punctuation">-</span> <span class="token string">"./zoo1/datalog:/datalog"</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token key atrule">ZOO_MY_ID</span><span class="token punctuation">:</span> <span class="token number">1</span>      <span class="token key atrule">ZOO_SERVERS</span><span class="token punctuation">:</span> server.1=zoo1<span class="token punctuation">:</span>2888<span class="token punctuation">:</span>3888;2181 server.2=zoo2<span class="token punctuation">:</span>2888<span class="token punctuation">:</span>3888;2181 server.3=zoo3<span class="token punctuation">:</span>2888<span class="token punctuation">:</span>3888;2181  <span class="token key atrule">zoo2</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> zookeeper    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> zoo2    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> zoo2    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 2182<span class="token punctuation">:</span><span class="token number">2181</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"./zoo2/data:/data"</span>      <span class="token punctuation">-</span> <span class="token string">"./zoo2/datalog:/datalog"</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token key atrule">ZOO_MY_ID</span><span class="token punctuation">:</span> <span class="token number">2</span>      <span class="token key atrule">ZOO_SERVERS</span><span class="token punctuation">:</span> server.1=zoo1<span class="token punctuation">:</span>2888<span class="token punctuation">:</span>3888;2181 server.2=zoo2<span class="token punctuation">:</span>2888<span class="token punctuation">:</span>3888;2181 server.3=zoo3<span class="token punctuation">:</span>2888<span class="token punctuation">:</span>3888;2181  <span class="token key atrule">zoo3</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> zookeeper    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> zoo3    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> zoo3    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 2183<span class="token punctuation">:</span><span class="token number">2181</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"./zoo3/data:/data"</span>      <span class="token punctuation">-</span> <span class="token string">"./zoo3/datalog:/datalog"</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token key atrule">ZOO_MY_ID</span><span class="token punctuation">:</span> <span class="token number">3</span>      <span class="token key atrule">ZOO_SERVERS</span><span class="token punctuation">:</span> server.1=zoo1<span class="token punctuation">:</span>2888<span class="token punctuation">:</span>3888;2181 server.2=zoo2<span class="token punctuation">:</span>2888<span class="token punctuation">:</span>3888;2181 server.3=zoo3<span class="token punctuation">:</span>2888<span class="token punctuation">:</span>3888;2181</code></pre><p>通过<code>docker-compose up -d</code>命令启动 ZooKeeper 集群，可以进入容器查看集群状态。可以参考这篇文章：<a href="https://zysite.top/2020/10/09/zookeeper-docker-compose-install/">docker-compose安装ZooKeeper集群</a></p><h2 id="Kafka-Compose-配置文件"><a href="#Kafka-Compose-配置文件" class="headerlink" title="Kafka Compose 配置文件"></a>Kafka Compose 配置文件</h2><p>创建一个 docker-compose.yml 文件，内容如下：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3.1'</span><span class="token key atrule">networks</span><span class="token punctuation">:</span>  <span class="token key atrule">default</span><span class="token punctuation">:</span>    <span class="token key atrule">external</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> zookeeper_network<span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">kafka1</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> wurstmeister/kafka    <span class="token key atrule">restart</span><span class="token punctuation">:</span> unless<span class="token punctuation">-</span>stopped    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> kafka1    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> kafka1    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"9092:9092"</span>    <span class="token key atrule">external_links</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> zoo1      <span class="token punctuation">-</span> zoo2      <span class="token punctuation">-</span> zoo3    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token key atrule">KAFKA_BROKER_ID</span><span class="token punctuation">:</span> <span class="token number">1</span>      <span class="token key atrule">KAFKA_LISTENERS</span><span class="token punctuation">:</span> PLAINTEXT<span class="token punctuation">:</span>//0.0.0.0<span class="token punctuation">:</span><span class="token number">9092</span>      <span class="token key atrule">KAFKA_ADVERTISED_LISTENERS</span><span class="token punctuation">:</span> PLAINTEXT<span class="token punctuation">:</span>//192.168.75.1<span class="token punctuation">:</span><span class="token number">9092    </span><span class="token comment" spellcheck="true">## 宿主机IP</span>      <span class="token key atrule">KAFKA_ADVERTISED_HOST_NAME</span><span class="token punctuation">:</span> kafka1      <span class="token key atrule">KAFKA_ADVERTISED_PORT</span><span class="token punctuation">:</span> <span class="token number">9092</span>      <span class="token key atrule">KAFKA_ZOOKEEPER_CONNECT</span><span class="token punctuation">:</span> <span class="token string">"zoo1:2181,zoo2:2181,zoo3:2181"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"./kafka/kafka1/data/:/kafka"</span>  <span class="token key atrule">kafka2</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> wurstmeister/kafka    <span class="token key atrule">restart</span><span class="token punctuation">:</span> unless<span class="token punctuation">-</span>stopped    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> kafka2    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> kafka2    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"9093:9092"</span>    <span class="token key atrule">external_links</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> zoo1      <span class="token punctuation">-</span> zoo2      <span class="token punctuation">-</span> zoo3    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token key atrule">KAFKA_BROKER_ID</span><span class="token punctuation">:</span> <span class="token number">2</span>      <span class="token key atrule">KAFKA_LISTENERS</span><span class="token punctuation">:</span> PLAINTEXT<span class="token punctuation">:</span>//0.0.0.0<span class="token punctuation">:</span><span class="token number">9092</span>      <span class="token key atrule">KAFKA_ADVERTISED_LISTENERS</span><span class="token punctuation">:</span> PLAINTEXT<span class="token punctuation">:</span>//192.168.75.1<span class="token punctuation">:</span><span class="token number">9093    </span><span class="token comment" spellcheck="true">## 宿主机IP</span>      <span class="token key atrule">KAFKA_ADVERTISED_HOST_NAME</span><span class="token punctuation">:</span> kafka2      <span class="token key atrule">KAFKA_ADVERTISED_PORT</span><span class="token punctuation">:</span> <span class="token number">9093</span>      <span class="token key atrule">KAFKA_ZOOKEEPER_CONNECT</span><span class="token punctuation">:</span> <span class="token string">"zoo1:2181,zoo2:2181,zoo3:2181"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"./kafka/kafka2/data/:/kafka"</span>  <span class="token key atrule">kafka3</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> wurstmeister/kafka    <span class="token key atrule">restart</span><span class="token punctuation">:</span> unless<span class="token punctuation">-</span>stopped    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> kafka3    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> kafka3    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"9094:9092"</span>    <span class="token key atrule">external_links</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> zoo1      <span class="token punctuation">-</span> zoo2      <span class="token punctuation">-</span> zoo3    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token key atrule">KAFKA_BROKER_ID</span><span class="token punctuation">:</span> <span class="token number">3</span>      <span class="token key atrule">KAFKA_LISTENERS</span><span class="token punctuation">:</span> PLAINTEXT<span class="token punctuation">:</span>//0.0.0.0<span class="token punctuation">:</span><span class="token number">9092</span>      <span class="token key atrule">KAFKA_ADVERTISED_LISTENERS</span><span class="token punctuation">:</span> PLAINTEXT<span class="token punctuation">:</span>//192.168.75.1<span class="token punctuation">:</span><span class="token number">9094   </span><span class="token comment" spellcheck="true">## 宿主机IP</span>      <span class="token key atrule">KAFKA_ADVERTISED_HOST_NAME</span><span class="token punctuation">:</span> kafka3      <span class="token key atrule">KAFKA_ADVERTISED_PORT</span><span class="token punctuation">:</span> <span class="token number">9094</span>      <span class="token key atrule">KAFKA_ZOOKEEPER_CONNECT</span><span class="token punctuation">:</span> <span class="token string">"zoo1:2181,zoo2:2181,zoo3:2181"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"./kafka/kafka3/data/:/kafka"</span>  <span class="token key atrule">kafka-manager</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># Kafka 图形管理界面</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> sheepkiller/kafka<span class="token punctuation">-</span>manager<span class="token punctuation">:</span>latest    <span class="token key atrule">restart</span><span class="token punctuation">:</span> unless<span class="token punctuation">-</span>stopped    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> kafka<span class="token punctuation">-</span>manager    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> kafka<span class="token punctuation">-</span>manager    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"9000:9000"</span>    <span class="token key atrule">links</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 连接本compose文件创建的container</span>      <span class="token punctuation">-</span> kafka1      <span class="token punctuation">-</span> kafka2      <span class="token punctuation">-</span> kafka3    <span class="token key atrule">external_links</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true"># 连接外部compose文件创建的container</span>      <span class="token punctuation">-</span> zoo1      <span class="token punctuation">-</span> zoo2      <span class="token punctuation">-</span> zoo3    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token key atrule">ZK_HOSTS</span><span class="token punctuation">:</span> zoo1<span class="token punctuation">:</span><span class="token number">2181</span><span class="token punctuation">,</span>zoo2<span class="token punctuation">:</span><span class="token number">2181</span><span class="token punctuation">,</span>zoo3<span class="token punctuation">:</span><span class="token number">2181</span>      <span class="token key atrule">KAFKA_BROKERS</span><span class="token punctuation">:</span> kafka1<span class="token punctuation">:</span><span class="token number">9092</span><span class="token punctuation">,</span>kafka2<span class="token punctuation">:</span><span class="token number">9093</span><span class="token punctuation">,</span>kafka3<span class="token punctuation">:</span><span class="token number">9094</span></code></pre><p>在启动了 ZooKeeper 集群后再启动 Kafka 集群。之后可以通过访问 <a href="http://localhost:9000/">http://localhost:9000</a> 访问 kafka-manager。</p><p><a href="https://zysite.top/archives/kafka-docker-compose-install#FKyDjfDm">前提</a><a href="https://zysite.top/archives/kafka-docker-compose-install#TAHJKpxY">ZooKeeper Compose 配置文件</a><a href="https://zysite.top/archives/kafka-docker-compose-install#nXNhTPmM">Kafka Compose 配置文件</a></p><blockquote><p><strong>Copyright:</strong> 采用 <a href="https://creativecommons.org/licenses/by/4.0/">知识共享署名4.0</a> 国际许可协议进行许可</p><p><strong>Links:</strong> <a href="https://zysite.top/archives/kafka-docker-compose-install">https://zysite.top/archives/kafka-docker-compose-install</a></p></blockquote><p><a href="https://zysite.top/tags/docker"># Docker</a><a href="https://zysite.top/tags/kafka"># Kafka</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/09252.html"/>
      <url>/2021/09252.html</url>
      
        <content type="html"><![CDATA[<p>2021年6月面试题Java后台（字节、招银、花旗、携程）</p><p><img src="https://zysite.top/upload/2021/04/logo-775ee8592a6b4875aa483a982c0be3c0.jpg" alt="img">67 次访问发布: 2021-07-01</p><p> <a href="https://zysite.top/categories/java">· Java</a></p><h2 id="招银网络科技（深圳）"><a href="#招银网络科技（深圳）" class="headerlink" title="招银网络科技（深圳）"></a>招银网络科技（深圳）</h2><p>技术面和HR一起面。</p><p>自我介绍、项目。</p><p>技术问题：</p><ul><li>介绍下生产者消费者模型。</li><li>通过怎样的设计可以提高消费速度。</li><li>生产者消费者模型中怎么避免重复消费、遗漏消费。</li><li>线程run方法和start方法的区别。</li><li>说下冒泡排序思路，有没有更快的排序算法，说下实现思路。</li></ul><p>问题相对较少。项目占了不少时间，全程大概一个小时。</p><h2 id="花旗金融（上海）"><a href="#花旗金融（上海）" class="headerlink" title="花旗金融（上海）"></a>花旗金融（上海）</h2><p><strong>一面：</strong></p><p>自我介绍（英文）。</p><p>项目细节（英文）。</p><p>问项目问题（中文）。</p><p>技术问题（中文）：</p><ul><li>常用的集合类有哪些。</li><li>HashMap中put方法的流程大致说下。</li><li>HashMap底层结构是什么。</li><li>JDK1.8中你使用了哪些新特性。</li><li>你的项目中Redis用来做什么，怎样设计的，为什么这么设计。</li><li>Hibernate和MyBatis的区别。</li><li>Spring Boot相比Spring有什么差别。</li><li>使用过事务吗，Spring中怎么使用的，都添加了@Transactional注解的方法相互调用，会发生什么。</li><li>AOP是什么，Spring AOP怎么实现的。</li><li>数据库中join和left join的区别。</li><li>MySQL中有哪些类型的索引。</li><li>线程访问共享资源有哪几种方式保证线程安全。</li><li>ThreadLocal知道吗。</li><li>线程池参数为什么指定为XX。</li></ul><p>用时大概一小时。</p><p><strong>二面：</strong></p><p>项目介绍（中文）。</p><p>技术问题（中文）：</p><ul><li>Spring中注解是怎么生效的，原理是什么。</li><li>怎么逆序一个byte数组。</li><li>数据库索引哪些情况下会失效。</li><li>Java启动参数你知道哪些。</li><li>项目中用到过哪些设计模式。</li><li>怎么实现单例模式的。</li><li>项目中遇到过最难的事情。</li></ul><p>你在目前公司工作的感受、企业文化怎么样（英文）。</p><p>用时大概半小时。</p><h2 id="字节"><a href="#字节" class="headerlink" title="字节"></a>字节</h2><p><strong>一面：</strong></p><p>自我介绍。</p><p>项目。</p><p>技术问题：</p><ul><li>Redis单进程怎么做到高并发的。</li><li>什么是IO多路复用。</li><li>Redis Cluster集群怎么实现数据一致性。</li><li>Redis从节点会处理查询请求吗，为什么向从节点查询数据。</li><li>缓存穿透、缓存击穿、缓存雪崩等情况了解吗，怎么解决。</li><li>进程和线程的关系、区别。</li><li>线程共享进程的哪些资源。</li><li>线程、进程为什么需要调度。</li><li>kafka消费者组是怎么实现的。</li><li>MySQL最大能存储多少数据，为什么。</li><li>MySQL有哪些非聚集索引实现。</li><li>MySQL怎么实现可重复读的。</li></ul><p>算法题：</p><p><a href="https://leetcode-cn.com/problems/k-th-smallest-in-lexicographical-order/">440. 字典序的第K小数字</a>（hard）</p><p>用时大概一小时（做题半小时左右）。</p><h2 id="携程"><a href="#携程" class="headerlink" title="携程"></a>携程</h2><p><strong>一面：</strong></p><p>自我介绍。</p><p>项目。</p><p>技术问题：</p><ul><li>Kafka 中 Offset 是什么。</li><li>Kafka 中 Leader 和 Follower 有什么区别。</li><li>从 Leader 节点读和 从 Follower 节点读有什么区别。</li><li>Kafka 中怎么保证消息消费的幂等性。</li><li>同一消费者组中多个消费者同时消费，存在什么问题。</li><li>Rabbitmq 怎么实现消息持久化的。</li><li>Spring 中事务用过吗，什么情况下会导致事务失效。</li><li>分布式事务知道吗。</li><li>Redis 哨兵知道吗，解决了什么问题。</li><li>缓存击穿怎么解决，布隆过滤器原理。</li><li>布隆过滤器判断存在就一定存在吗。</li><li>多线程下使用 HashMap。</li><li>ConcurrentHashMap 实现线程安全的原理。</li><li>线程池有使用过吗，有哪些核心参数，核心线程什么时候创建。</li><li>ThreadLocal 有使用过吗，原理是什么，使用时需要注意什么。</li><li>大概讲讲 Java GC。</li><li>GC后内存还是不足会怎么样。</li><li>G1 垃圾收集器在进行垃圾回收时会存在超时的情况吗。</li><li>G1 垃圾收集器是怎么保证一定的停顿时间的。</li></ul><p>用时大概 40 分钟。</p><p><strong>二面：</strong></p><p>技术问题：</p><ul><li>你对计算机网络的理解。</li><li>传输层有哪些协议。</li><li>TCP与UDP的区别。</li><li>TCP连接怎么建立的。</li><li>为什么需要三次握手，两次行不行。</li><li>怎么理解TCP中的”连接“。</li><li>TCP如何保证可靠传输的。</li><li>TCP拥塞控制怎么实现的。</li><li>数据包中可不可以用mac地址替换ip地址。</li><li>Java中集合类用过哪些，原理了解吗。</li><li>数组和链表的特点、区别。</li><li>不考虑顺序性的情况下，数组中插入/删除元素，怎么避免大量移动元素。</li><li>Netty有什么特性。</li><li>你怎么理解NIO，原理是什么。</li><li>Redis是单线程的指的是什么。</li><li>线程池的拒绝策略有哪些，你们用的是什么。</li><li>用过哪些设计模式。</li></ul><p>用时大概50分钟。</p><p><a href="https://zysite.top/archives/mianshiti-2021-06-java#cbTJzmpf">招银网络科技（深圳）</a><a href="https://zysite.top/archives/mianshiti-2021-06-java#QKHmDfEP">花旗金融（上海）</a><a href="https://zysite.top/archives/mianshiti-2021-06-java#yAdZmfYH">字节</a><a href="https://zysite.top/archives/mianshiti-2021-06-java#ASyZzBsb">携程</a></p><blockquote><p><strong>Copyright:</strong> 采用 <a href="https://creativecommons.org/licenses/by/4.0/">知识共享署名4.0</a> 国际许可协议进行许可</p><p><strong>Links:</strong> <a href="https://zysite.top/archives/mianshiti-2021-06-java">https://zysite.top/archives/mianshiti-2021-06-java</a></p></blockquote><p><a href="https://zysite.top/tags/java"># Java</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/092516.html"/>
      <url>/2021/092516.html</url>
      
        <content type="html"><![CDATA[<h1 id="鲲鹏系统"><a href="#鲲鹏系统" class="headerlink" title="鲲鹏系统"></a>鲲鹏系统</h1><p>显示类似上述，表明docker-compose安装成功。</p><h1 id="打开服务器端口"><a href="#打开服务器端口" class="headerlink" title="打开服务器端口"></a>打开服务器端口</h1><p>​          更新时间：2021/08/26 GMT+08:00        </p><p>本小节打开的端口为后续VNC连接使用，起始端口号为5900，具体端口号为起始端口号和-vnc参数的端口号的和，例如-vnc :1，则应打开端口为5901。</p><ol><li><p>查看已经开放端口。</p><pre><code>firewall-cmd --list-ports</code></pre></li></ol><p>开启指定端口。</p><pre><code>firewall-cmd --zone=public --add-port=6371/tcp --permanentfirewall-cmd --zone=public --add-port=3311/tcp --permanentfirewall-cmd --zone=public --add-port=13306/tcp --permanentfirewall-cmd --zone=public --add-port=13307/tcp --permanentfirewall-cmd --zone=public --add-port=3307/tcp --permanentfirewall-cmd --zone=public --add-port=6371/tcp –permanent systemctl restart firewalld.service</code></pre><p>重启生效。</p><p>10.143.57.246 redis。10.143.57.246:6371 123456<br>10.143.57.247 redis。10.143.57.247:6371 123456<br>10.143.57.248 mysql。10.143.57.248:3310  root 2021123456<br>10.143.57.249 mysql。10.143.57.249:3310  root 2021123456</p><h1 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a><a href="https://support.huaweicloud.com/instg-kunpengcpfs/kunpengcpfs_03_0001.html">Docker安装</a></h1><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>更新时间：2021/09/15 GMT+08:00</p><p><a href="https://support.huaweicloud.com/instg-kunpengcpfs/kunpengcpfs-instg.pdf">查看PDF</a></p><p><a href="javascript:void(0);">分享</a></p><h4 id="简要介绍"><a href="#简要介绍" class="headerlink" title="简要介绍"></a>简要介绍</h4><p>Docker是一个开源的应用容器引擎，Docker设想交付运行环境如同海运，操作系统如同一个货轮，每一个在操作系统基础上的软件都如同一个集装箱，用户可以通过标准化手段自由组装运行环境，同时集装箱的内容可以由用户自定义，也可以由专业人员制造。这样，交付一个软件，就是一系列标准化组件的集合的交付，如同乐高积木，用户只需要选择合适的积木组合，并且在最顶端署上自己的名字（最后一个标准化组件是用户的App），这也就是基于Docker的PaaS产品的原型。</p><p>开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的Linux机器上。容器是完全使用沙箱机制，相互之间不会有任何接口。</p><p>开发语言：Shell</p><p>一句话描述：开源的应用容器引擎</p><h4 id="建议的版本"><a href="#建议的版本" class="headerlink" title="建议的版本"></a>建议的版本</h4><table><thead><tr><th>软件</th><th>版本</th></tr></thead><tbody><tr><td>Docker</td><td>docker-18.09.8及以上</td></tr></tbody></table><h1 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h1><p>更新时间：2021/09/15 GMT+08:00</p><p><a href="https://support.huaweicloud.com/instg-kunpengcpfs/kunpengcpfs-instg.pdf">查看PDF</a></p><p><a href="javascript:void(0);">分享</a></p><h4 id="硬件要求"><a href="#硬件要求" class="headerlink" title="硬件要求"></a>硬件要求</h4><table><thead><tr><th>类别</th><th>项目</th><th>要求</th></tr></thead><tbody><tr><td>硬件</td><td>服务器</td><td>TaiShan 200服务器（型号2280）</td></tr><tr><td>CPU</td><td>鲲鹏920处理器</td><td></td></tr><tr><td>网卡</td><td>板载电口网卡TM210</td><td></td></tr></tbody></table><h4 id="操作系统和安装要求"><a href="#操作系统和安装要求" class="headerlink" title="操作系统和安装要求"></a>操作系统和安装要求</h4><table><thead><tr><th>类型</th><th>获取方法</th></tr></thead><tbody><tr><td>操作系统</td><td>操作系统版本：CentOS Linux release 7.6.1810（AltArch）下载链接： <a href="http://isoredirect.centos.org/altarch/7/isos/aarch64/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%89%88%E6%9C%AC%EF%BC%9AopenEuler-20.03-LTS%E4%B8%8B%E8%BD%BD%E9%93%BE%E6%8E%A5%EF%BC%9Ahttp://openeuler.org/zh/download/">http://isoredirect.centos.org/altarch/7/isos/aarch64/操作系统版本：openEuler-20.03-LTS下载链接：http://openeuler.org/zh/download/</a></td></tr><tr><td>Docker 安装版本</td><td>docker-18.09.8</td></tr><tr><td>网络需求</td><td>DockerHub地址（<a href="https://hub.docker.com/%EF%BC%89%E7%BD%91%E7%BB%9C%E5%8F%AF%E8%BE%BEDocker%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%EF%BC%88https://download.docker.com/linux/static/stable/aarch64/%EF%BC%89%E7%BD%91%E7%BB%9C%E5%8F%AF%E8%BE%BE**%E8%AF%B4%E6%98%8E%EF%BC%9A**Docker%E9%BB%98%E8%AE%A4%E6%89%93%E5%BC%80nf_conntrack%E6%9C%8D%E5%8A%A1%EF%BC%8C%E5%85%B3%E9%97%AD%E8%AF%A5%E6%9C%8D%E5%8A%A1%E6%97%B6%E6%97%A0%E6%B3%95%E5%AE%89%E8%A3%85%EF%BC%8C%E8%AF%B7%E7%A1%AE%E4%BF%9D%E6%89%93%E5%BC%80%E3%80%82">https://hub.docker.com/）网络可达Docker下载地址（https://download.docker.com/linux/static/stable/aarch64/）网络可达**说明：**Docker默认打开nf_conntrack服务，关闭该服务时无法安装，请确保打开。</a></td></tr></tbody></table><p><strong>父主题：</strong> <a href="https://support.huaweicloud.com/instg-kunpengcpfs/kunpengcpfs_03_0001.html">Docker 安装指南</a></p><h1 id="获取源码"><a href="#获取源码" class="headerlink" title="获取源码"></a>获取源码</h1><p>更新时间：2021/09/15 GMT+08:00</p><p><a href="https://support.huaweicloud.com/instg-kunpengcpfs/kunpengcpfs-instg.pdf">查看PDF</a></p><p><a href="javascript:void(0);">分享</a></p><p><img src="https://res-img3.huaweicloud.com/content/dam/cloudbu-site/archive/china/zh-cn/support/resource/framework/v3/images/support-doc-new-note.svg" alt="img">说明：</p><p>采用静态包而非yum install的方式，是因为默认yum源的Docker版本过旧，容易出错且出现问题难以定位。</p><ol><li><p>进入Docker官方下载地址，查看Docker静态安装包列表。</p><p>下载地址：<a href="https://download.docker.com/linux/static/stable/aarch64/">https://download.docker.com/linux/static/stable/aarch64/</a></p><p><img src="https://support.huaweicloud.com/instg-kunpengcpfs/zh-cn_image_0200584119.png" alt="点击放大"></p></li><li><p>选择所需版本的安装包并下载至本地。如<a href="https://support.huaweicloud.com/instg-kunpengcpfs/kunpengdocker_03_0003.html#kunpengdocker_03_0003__fig31094184517">图1</a>所示。</p><p><img src="https://res-img3.huaweicloud.com/content/dam/cloudbu-site/archive/china/zh-cn/support/resource/framework/v3/images/support-doc-new-note.svg" alt="img">说明：</p><p>在离线场景下，可以先通过网络下载安装包再传入目标主机的目标目录。</p><pre><code>wget https://download.docker.com/linux/static/stable/aarch64/docker-18.09.8.tgz这边建议直接下载然后放在root目录下cd /root上传docker-18.09.8.tgz</code></pre><p>图1 下载静态包<br><img src="https://support.huaweicloud.com/instg-kunpengcpfs/zh-cn_image_0218559431.png" alt="点击放大"></p><p>如<a href="https://support.huaweicloud.com/instg-kunpengcpfs/kunpengdocker_03_0003.html#kunpengdocker_03_0003__fig610134104510">图 成功下载的Docker安装包</a>所示，表示下载成功。</p><p>图2 成功下载的Docker安装包<br><img src="https://support.huaweicloud.com/instg-kunpengcpfs/zh-cn_image_0200584120.png" alt="点击放大"></p></li></ol><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>更新时间：2021/09/15 GMT+08:00</p><p><a href="https://support.huaweicloud.com/instg-kunpengcpfs/kunpengcpfs-instg.pdf">查看PDF</a></p><p><a href="javascript:void(0);">分享</a></p><h4 id="获取Docker静态包及组件"><a href="#获取Docker静态包及组件" class="headerlink" title="获取Docker静态包及组件"></a>获取Docker静态包及组件</h4><ol><li><p>确认物理机的操作系统版本。</p><pre><code>cat /etc/redhat-release</code></pre><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p><img src="https://support.huaweicloud.com/instg-kunpengcpfs/zh-cn_image_0272464018.png" alt="img"></p></li><li><p>将静态安装包在本地解压。解压后本地文件夹下会多一个docker文件夹， 内容如<a href="https://support.huaweicloud.com/instg-kunpengcpfs/kunpengdocker_03_0004.html#kunpengdocker_03_0004__fig132611819153317">图1</a>所示。</p><pre><code>在/root目录下执行压缩命令tar xvpf docker-18.09.8.tgz</code></pre><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><p>图1 解压后的安装包<br><img src="https://support.huaweicloud.com/instg-kunpengcpfs/zh-cn_image_0237238404.png" alt="点击放大"></p></li><li><p>将文件夹中所有内容拷贝至“/usr/bin”文件夹下。</p><pre><code>在/root目录下执行压缩命令cp -p docker/* /usr/bin</code></pre><h2 id="-2"><a href="#-2" class="headerlink" title=""></a></h2></li></ol><h4 id="配置前的环境准备"><a href="#配置前的环境准备" class="headerlink" title="配置前的环境准备"></a>配置前的环境准备</h4><ol><li><p>为使Docker可以正常使用，还需要关闭SELinux及防火墙。</p><pre><code>setenforce 0 systemctl stop firewalldsystemctl disable firewalld</code></pre><h2 id="-3"><a href="#-3" class="headerlink" title=""></a></h2><p>此时只是暂时禁用SELinux，如果要长期禁用SELinux，还需要修改/etc/selinux/config文件。</p><p>将SELINUX=enforcing改为SELINUX=permissive或disabled，才能长期有效。</p></li><li><p>重启服务器，使修改的配置文件生效。</p></li></ol><h4 id="启动docker-service服务"><a href="#启动docker-service服务" class="headerlink" title="启动docker.service服务"></a>启动docker.service服务</h4><ol><li><p>整段执行如下命令，配置docker.service文件。</p><pre><code>cat &gt;/usr/lib/systemd/system/docker.service &lt;&lt;EOF</code></pre><pre><code>[Unit]Description=Docker Application Container EngineDocumentation=http://docs.docker.comAfter=network.target docker.socket[Service]Type=notifyEnvironmentFile=-/run/flannel/dockerWorkingDirectory=/usr/local/binExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:4243 -H unix:///var/run/docker.sock --selinux-enabled=false --log-opt max-size=1gExecReload=/bin/kill -s HUP $MAINPID# Having non-zero Limit*s causes performance problems due to accounting overhead# in the kernel. We recommend using cgroups to do container-local accounting.LimitNOFILE=infinityLimitNPROC=infinityLimitCORE=infinity# Uncomment TasksMax if your systemd version supports it.# Only systemd 226 and above support this version.#TasksMax=infinityTimeoutStartSec=0# set delegate yes so that systemd does not reset the cgroups of docker containersDelegate=yes# kill only the docker process, not all processes in the cgroupKillMode=processRestart=on-failure[Install]WantedBy=multi-user.targetEOF</code></pre><p>服务文件就已经成功生成。</p><p><img src="https://res-img3.huaweicloud.com/content/dam/cloudbu-site/archive/china/zh-cn/support/resource/framework/v3/images/support-doc-new-note.svg" alt="img">说明：</p><p>拷贝上文代码时请注意粘贴在终端的样式，参考样式如<a href="https://support.huaweicloud.com/instg-kunpengcpfs/kunpengdocker_03_0004.html#kunpengdocker_03_0004__fig1495020420616">图2</a>。</p><p>图2 粘贴在终端中的样式<br><img src="https://support.huaweicloud.com/instg-kunpengcpfs/zh-cn_image_0244180257.png" alt="点击放大"></p></li><li><p>随后启动相关服务，输出Docker的状态。</p><pre><code>systemctl daemon-reload                                                        systemctl status docker                                                         systemctl restart docker                                                         systemctl status docker                                                         systemctl enable docker    #设置开机启动                                                      systemctl status docker </code></pre><p><img src="https://support.huaweicloud.com/instg-kunpengcpfs/zh-cn_image_0272463341.png" alt="点击放大"></p><p><img src="https://res-img3.huaweicloud.com/content/dam/cloudbu-site/archive/china/zh-cn/support/resource/framework/v3/images/support-doc-new-note.svg" alt="img">说明：</p><p>第一遍运行<strong>systemctl status docker</strong>的时候Docker的加载状态为inactive (dead)状态，这是因为刚刚配置的docker.service服务尚未启动。</p></li><li><p>查询Docker版本。</p><pre><code>docker version</code></pre><p>如<a href="https://support.huaweicloud.com/instg-kunpengcpfs/kunpengdocker_03_0004.html#kunpengdocker_03_0004__fig16567302512">图3</a>所示，表示Docker安装成功。</p><p>图3 docker version<br><img src="https://support.huaweicloud.com/instg-kunpengcpfs/zh-cn_image_0237238406.png" alt="点击放大"></p></li></ol><h1 id="运行和验证"><a href="#运行和验证" class="headerlink" title="运行和验证"></a>运行和验证</h1><p>更新时间：2021/09/15 GMT+08:00</p><p><a href="https://support.huaweicloud.com/instg-kunpengcpfs/kunpengcpfs-instg.pdf">查看PDF</a></p><p><a href="javascript:void(0);">分享</a></p><ol><li><p>运行程序，验证Docker的安装结果。</p><pre><code>docker run hello-world</code></pre><h2 id="-4"><a href="#-4" class="headerlink" title=""></a></h2><p>输出结果如<a href="https://support.huaweicloud.com/instg-kunpengcpfs/kunpengdocker_03_0005.html#kunpengdocker_03_0005__fig29986390">图1</a>所示。</p><p>图1 docker hello world<br><img src="https://support.huaweicloud.com/instg-kunpengcpfs/zh-cn_image_0237239047.png" alt="点击放大"></p><p>可以看出Docker从DockerHub上拉取了hello-world镜像，运行并输出了相关信息，表示Docker安装成功。</p></li><li><p>查看本机所有容器的Docker服务。</p><pre><code>docker ps -a</code></pre><h2 id="-5"><a href="#-5" class="headerlink" title=""></a></h2><p>输出结果如<a href="https://support.huaweicloud.com/instg-kunpengcpfs/kunpengdocker_03_0005.html#kunpengdocker_03_0005__fig194715115918">图2</a>所示。</p><p>图2 容器已创建<br><img src="https://support.huaweicloud.com/instg-kunpengcpfs/zh-cn_image_0237239048.png" alt="点击放大"></p><p>可以看到对应容器已经创建，Docker服务完全可用。</p><p><img src="https://res-img3.huaweicloud.com/content/dam/cloudbu-site/archive/china/zh-cn/support/resource/framework/v3/images/support-doc-new-note.svg" alt="img">说明：</p><p>在刚刚安装Docker之后，本地镜像库为空，执行docker run hello-world， 可以验证Docker从DockerHub上拉取镜像的功能、Docker通过镜像创建容器的功能。</p></li></ol><h3 id="添加docker的华为云镜像加速"><a href="#添加docker的华为云镜像加速" class="headerlink" title="添加docker的华为云镜像加速"></a>添加docker的华为云镜像加速</h3><p>注册华为云账号，登陆控制台，打开华为云的SWR镜像仓库</p><p><a href="https://console.huaweicloud.com/swr/?region=cn-north-4#/app/swr/huaweiOfficialList">https://console.huaweicloud.com/swr/?region=cn-north-4#/app/swr/huaweiOfficialList</a></p><p>点击镜像加速器</p><p>打开docker的daemon.json配置文件/etc/docker/daemon.json，添加相关镜像加速地址</p><pre><code>sudo mkdir -p /etc/dockersudo tee /etc/docker/daemon.json &lt;&lt;-&#39;EOF&#39;&#123;  &quot;registry-mirrors&quot;: [&quot;https://5c7136d0f63849ec980a91e8715757b2.mirror.swr.myhuaweicloud.com&quot;],  &quot;experimental&quot;:true&#125;EOFsudo systemctl daemon-reloadsudo systemctl restart docker或vi /etc/docker/daemon.json&#123;  &quot;registry-mirrors&quot;: [&quot;https://5c7136d0f63849ec980a91e8715757b2.mirror.swr.myhuaweicloud.com&quot;],  &quot;experimental&quot;:true&#125;</code></pre><p>注意：逗号分隔</p><p>重启docker</p><pre><code>systemctl restart docker</code></pre><p>输入docker info查看加速的镜像配置信息</p><pre><code>docker info</code></pre><h1 id="安装Docker-Compose"><a href="#安装Docker-Compose" class="headerlink" title="安装Docker Compose"></a><a href="https://support.huaweicloud.com/prtg-kunpengmm/dockercompose_01_0001.html">安装Docker Compose</a></h1><p>更新时间：2021/08/26 GMT+08:00</p><p><a href="https://support.huaweicloud.com/prtg-kunpengmm/prgt-kunpengmm.pdf">查看PDF</a></p><p><a href="javascript:void(0);">分享</a></p><h4 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h4><p><strong>简要介绍</strong></p><p>Docker Compose是Docker编排服务的一部分，Compose可以让用户在集群中部署分布式应用。Docker Compose是一个属于“应用层”的服务，用户可以定义哪个容器组运行哪个应用，它支持动态改变应用，并在需要时扩展。</p><p>语言：Go</p><p>一句话描述：Docker编排工具</p><p>开源协议：Apache</p><p><strong>建议的版本</strong></p><p>建议使用版本为“Docker Compose-1.22.0”。</p><h4 id="环境要求-1"><a href="#环境要求-1" class="headerlink" title="环境要求"></a>环境要求</h4><p><strong>云服务器要求</strong></p><p>本文以云服务器KC1实例测试，云服务器配置如<a href="https://support.huaweicloud.com/prtg-kunpengmm/dockercompose_01_0001.html#dockercompose_01_0001__zh-cn_topic_0188837366_table8947172114303">表1</a>所示。</p><table><thead><tr><th>项目</th><th>说明</th></tr></thead><tbody><tr><td>规格</td><td>kc1.large.2 | 2vCPUs | 4GB</td></tr><tr><td>磁盘</td><td>系统盘：高IO（40GB）</td></tr></tbody></table><p><strong>操作系统要求</strong></p><p>操作系统要求如<a href="https://support.huaweicloud.com/prtg-kunpengmm/dockercompose_01_0001.html#dockercompose_01_0001__zh-cn_topic_0188837366_table4283143110395">表2</a>所示。</p><table><thead><tr><th>项目</th><th>说明</th><th>下载地址</th></tr></thead><tbody><tr><td>CentOS</td><td>7.6</td><td>在公共镜像中已提供。</td></tr><tr><td>Kernel</td><td>4.14.0-115</td><td>在公共镜像中已提供。</td></tr></tbody></table><h4 id="配置安装环境"><a href="#配置安装环境" class="headerlink" title="配置安装环境"></a>配置安装环境</h4><ol><li><p>安装wget和openjdk。</p><p><strong>yum install java-1.8.0-openjdk java-1.8.0-openjdk-devel wget -y</strong></p></li><li><p>安装Python 3.6。</p><p><strong>yum install python36 -y</strong></p></li><li><p>安装docker。</p><p><strong>yum install docker</strong></p></li><li><p>启动docker。</p><p><strong>systemctl start docker</strong></p></li><li><p>检查docker是否安装成功，显示如下表示安装成功。</p><p><strong>docker –version</strong></p><pre><code>Docker version 1.13.1, build 7f2769b/1.13.1</code></pre></li></ol><h4 id="获取软件包"><a href="#获取软件包" class="headerlink" title="获取软件包"></a>获取软件包</h4><p>获取“Docker Compose-1.22.0”安装包。</p><p><strong>cd /usr/local/src</strong></p><p><strong>git clone <a href="https://github.com/aiminickwong/docker-compose-aarch64.git">https://github.com/aiminickwong/docker-compose-aarch64.git</a></strong></p><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><ol><li><p>进入docker-compose源文件目录。</p><p>**cd /usr/local/src/**<strong>docker-compose-aarch64</strong></p></li><li><p>配置Dockerfile。</p><p><strong>vi Dockerfile</strong></p><p>注释掉RUN [ “cross-build-start” ]，即在之前加入‘#’后保存退出。</p><pre><code># Dockerfile to build docker-compose for aarch64FROM arm64v8/python:3.6.5-stretch# Add envENV LANG C.UTF-8# Enable cross-build for aarch64COPY ./vendor/qemu-bin /usr/bin/#RUN [ &quot;cross-build-start&quot; ]</code></pre></li><li><p>安装docker-compose。</p><p>**cd /usr/local/src/**<strong>docker-compose-aarch64</strong></p><p><strong>docker build . -t docker-compose-aarch64-builder</strong></p></li></ol><h4 id="运行和验证-1"><a href="#运行和验证-1" class="headerlink" title="运行和验证"></a>运行和验证</h4><ol><li><p>运行docker-compose容器。</p><p><strong>docker run docker-compose-aarch64-builder</strong></p></li><li><p>找到生成的“docker-compose”可执行程序。</p><p><strong>find / -name “docker-compose-Linux-aarch64”</strong></p><pre><code>[root@ecs-teukh-1 docker-compose-aarch64]# find / -name &quot;docker-compose-Linux-aarch64&quot;/var/lib/docker/overlay2/1d8081e2d4b5958a1eccbaf76e949219c260d89236315b48cf0bfa95e076c1da/diff/build/dockercompose/docker-compose-Linux-aarch64/var/lib/docker/overlay2/1d8081e2d4b5958a1eccbaf76e949219c260d89236315b48cf0bfa95e076c1da/diff/build/docker-compose-Linux-aarch64/var/lib/docker/volumes/9d6624e6fc53d37221774fed9c64cf1a4ce64319a221e1069c70b4c88df7be40/_data/docker-compose-Linux-aarch64</code></pre><p>可以看到有三个目录存放了生成的“docker-compose-Linux-aarch64”可执行程序。</p></li><li><p>进入任意一个目录。</p><p><strong>cd /var/lib/docker/overlay2/1d8081e2d4b5958a1eccbaf76e949219c260d89236315b48cf0bfa95e076c1da/diff/build/dockercompose/</strong></p><p><strong>./docker-compose-Linux-aarch64 –version</strong></p><pre><code>[root@ecs-teukh-1 build]# ./docker-compose-Linux-aarch64 --versiondocker-compose version 1.22.0, build e20d808ecp docker-compose-Linux-aarch64  docker-compose-Linux-aarch32sudo mv docker-compose-Linux-aarch64 /usr/local/bin/docker-composemv docker-compose-Linux-aarch32 docker-compose-Linux-aarch64docker-compose version</code></pre><p>显示类似上述，表明docker-compose安装成功。</p></li></ol><h1 id="Redis-5-0-4-移植指南（CentOS-7-6-amp-openEuler-20-03）"><a href="#Redis-5-0-4-移植指南（CentOS-7-6-amp-openEuler-20-03）" class="headerlink" title="Redis 5.0.4 移植指南（CentOS 7.6&amp;openEuler 20.03）"></a><a href="https://support.huaweicloud.com/prtg-other-kunpengbds/kunpengbds_02_0061.html">Redis 5.0.4 移植指南（CentOS 7.6&amp;openEuler 20.03）</a></h1><h1 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h1><p>更新时间：2021/08/26 GMT+08:00</p><p><a href="https://support.huaweicloud.com/prtg-other-kunpengbds/prtg-other-kunpengbds.pdf">查看PDF</a></p><p><a href="javascript:void(0);">分享</a></p><p>Redis是一个使用ANSI C语言编写的开源key-value内存数据库系统，Redis支持字符串(String), 哈希(Hash), 列表(list), 集合(sets) 和 有序集合(sorted sets)等数据结构类型，并提供多种语言的API。</p><h1 id="环境要求-2"><a href="#环境要求-2" class="headerlink" title="环境要求"></a>环境要求</h1><p>更新时间：2021/08/26 GMT+08:00</p><p><a href="https://support.huaweicloud.com/prtg-other-kunpengbds/prtg-other-kunpengbds.pdf">查看PDF</a></p><p><a href="javascript:void(0);">分享</a></p><h4 id="硬件要求-1"><a href="#硬件要求-1" class="headerlink" title="硬件要求"></a>硬件要求</h4><table><thead><tr><th>项目</th><th>说明</th></tr></thead><tbody><tr><td>服务器</td><td>TaiShan服务器</td></tr><tr><td>CPU</td><td>鲲鹏920处理器 或 鲲鹏916处理器</td></tr><tr><td>磁盘分区</td><td>对磁盘分区无要求</td></tr><tr><td>网络</td><td>可访问外网</td></tr></tbody></table><h4 id="软件要求"><a href="#软件要求" class="headerlink" title="软件要求"></a>软件要求</h4><ul><li><p>CentOS</p><table><thead><tr><th>项目</th><th>版本</th></tr></thead><tbody><tr><td>CentOS</td><td>7.6</td></tr><tr><td>OS Kernel</td><td>4.14.0</td></tr><tr><td>GCC</td><td>4.8.5</td></tr><tr><td>Redis</td><td>5.0.4</td></tr></tbody></table></li><li><p>OpenEuler</p><table><thead><tr><th>项目</th><th>版本</th></tr></thead><tbody><tr><td>OpenEuler</td><td>20.03 LTS SP1</td></tr><tr><td>OS Kernel</td><td>4.19.90</td></tr><tr><td>GCC</td><td>7.3.0</td></tr></tbody></table></li></ul><h1 id="配置编译环境"><a href="#配置编译环境" class="headerlink" title="配置编译环境"></a>配置编译环境</h1><p>更新时间：2021/08/26 GMT+08:00</p><p><a href="https://support.huaweicloud.com/prtg-other-kunpengbds/prtg-other-kunpengbds.pdf">查看PDF</a></p><p><a href="javascript:void(0);">分享</a></p><h4 id="安装GCC等依赖"><a href="#安装GCC等依赖" class="headerlink" title="安装GCC等依赖"></a>安装GCC等依赖</h4><h4 id="挂载OS镜像。"><a href="#挂载OS镜像。" class="headerlink" title="挂载OS镜像。"></a>挂载OS镜像。</h4><pre><code>mount YOUR_OS.iso /media -o loop</code></pre><p><img src="https://res-img3.huaweicloud.com/content/dam/cloudbu-site/archive/china/zh-cn/support/resource/framework/v3/images/support-doc-new-note.svg" alt="img">说明：</p><p>YOUR_OS.iso用实际的iso包名代替。</p><h5 id="备份repo文件，清空“-etc-yum-repos-d-”目录文件。"><a href="#备份repo文件，清空“-etc-yum-repos-d-”目录文件。" class="headerlink" title="备份repo文件，清空“/etc/yum.repos.d/”目录文件。"></a>备份repo文件，清空“/etc/yum.repos.d/”目录文件。</h5><pre><code>cp -r /etc/yum.repos.d /etc/yum.repos.d-bakrm /etc/yum.repos.d/*</code></pre><p><strong><img src="https://res-img2.huaweicloud.com/content/dam/cloudbu-site/archive/china/zh-cn/support/resource/framework/v3/images/support-doc-new-notice.svg" alt="img">须知：</strong></p><p>请确认已经备份所有repo文件后，在rm删除界面输入y表示同意删除。</p><h5 id="修改“-etc-yum-repos-d-Local-repo”文件。"><a href="#修改“-etc-yum-repos-d-Local-repo”文件。" class="headerlink" title="修改“/etc/yum.repos.d/Local.repo”文件。"></a>修改“/etc/yum.repos.d/Local.repo”文件。</h5><pre><code>vi /etc/yum.repos.d/Local.repo</code></pre><h5 id="配置yum本地源。"><a href="#配置yum本地源。" class="headerlink" title="配置yum本地源。"></a>配置yum本地源。</h5><pre><code>[Local]name=Localbaseurl=file:///media/enabled=1gpgcheck=0</code></pre><h5 id="使YUM源配置生效。"><a href="#使YUM源配置生效。" class="headerlink" title="使YUM源配置生效。"></a>使YUM源配置生效。</h5><pre><code>yum clean allyum makecache</code></pre><h5 id="通过YUM源安装GCC相关软件。"><a href="#通过YUM源安装GCC相关软件。" class="headerlink" title="通过YUM源安装GCC相关软件。"></a>通过YUM源安装GCC相关软件。</h5><pre><code>yum -y install gcc gcc-c++ gcc-gfortran.aarch64 libgcc.aarch64 make cmake libtool autoconf automake ant wget git vim</code></pre><h5 id="解决-fsigned-char问题（修改gcc）。"><a href="#解决-fsigned-char问题（修改gcc）。" class="headerlink" title="解决-fsigned-char问题（修改gcc）。"></a>解决-fsigned-char问题（修改gcc）。</h5><pre><code>a.寻找gcc所在路径（一般位于“/usr/bin/gcc”）。command -v gcc</code></pre><h5 id="更改原gcc文件的名字（例如改成gcc-impl）。"><a href="#更改原gcc文件的名字（例如改成gcc-impl）。" class="headerlink" title="更改原gcc文件的名字（例如改成gcc-impl）。"></a>更改原gcc文件的名字（例如改成gcc-impl）。</h5><pre><code>b.更改原gcc文件的名字（例如改成gcc-impl）。mv /usr/bin/gcc /usr/bin/gcc-impl</code></pre><h5 id="新建gcc文件。"><a href="#新建gcc文件。" class="headerlink" title="新建gcc文件。"></a>新建gcc文件。</h5><pre><code>vi /usr/bin/gcc填入如下内容保存。</code></pre><p>填入如下内容保存。</p><pre><code>#! /bin/sh/usr/bin/gcc-impl -fsigned-char &quot;$@&quot;</code></pre><h1 id="-6"><a href="#-6" class="headerlink" title=""></a></h1><h5 id="给gcc文件添加执行权限。"><a href="#给gcc文件添加执行权限。" class="headerlink" title="给gcc文件添加执行权限。"></a>给gcc文件添加执行权限。</h5><pre><code>chmod +x /usr/bin/gcc</code></pre><h5 id="确认GCC是否可用。"><a href="#确认GCC是否可用。" class="headerlink" title="确认GCC是否可用。"></a>确认GCC是否可用。</h5><pre><code>gcc --version</code></pre><ul><li><p>CentOS：回显如下所示即为安装成功。</p><p><img src="https://support.huaweicloud.com/prtg-other-kunpengbds/zh-cn_image_0301256701.png" alt="点击放大"></p></li><li><p>openEuler：回显如下所示即为安装成功。</p><p><img src="https://support.huaweicloud.com/prtg-other-kunpengbds/zh-cn_image_0000001129857746.png" alt="点击放大"></p></li></ul><h4 id="解决-fsigned-char问题（修改g-）。"><a href="#解决-fsigned-char问题（修改g-）。" class="headerlink" title="解决-fsigned-char问题（修改g++）。"></a>解决-fsigned-char问题（修改g++）。</h4><pre><code>a.寻找g++所在路径（一般位于“/usr/bin/g++”）。command -v g++</code></pre><pre><code>b.更改原g++文件的名字（例如改成g++-impl）。mv /usr/bin/g++ /usr/bin/g++-impl</code></pre><h4 id="新建g-文件。"><a href="#新建g-文件。" class="headerlink" title="新建g++文件。"></a>新建g++文件。</h4><pre><code>vi /usr/bin/g++</code></pre><p>填入如下内容保存。</p><pre><code>#! /bin/sh/usr/bin/g++-impl -fsigned-char &quot;$@&quot;</code></pre><h4 id="给g-文件添加执行权限。"><a href="#给g-文件添加执行权限。" class="headerlink" title="给g++文件添加执行权限。"></a>给g++文件添加执行权限。</h4><pre><code>chmod +x /usr/bin/g++</code></pre><h4 id="确认g-是否可用。"><a href="#确认g-是否可用。" class="headerlink" title="确认g++是否可用。"></a>确认g++是否可用。</h4><pre><code>g++ --version</code></pre><ul><li><p>CentOS：回显如下所示即为安装成功。</p><p><img src="https://support.huaweicloud.com/prtg-other-kunpengbds/zh-cn_image_0301256702.png" alt="点击放大"></p></li><li><p>openEuler：回显如下所示即为安装成功。</p><p><img src="https://support.huaweicloud.com/prtg-other-kunpengbds/zh-cn_image_0000001129698112.png" alt="点击放大"></p></li></ul><h1 id="编译安装Redis"><a href="#编译安装Redis" class="headerlink" title="编译安装Redis"></a>编译安装Redis</h1><p>更新时间：2021/08/26 GMT+08:00</p><p><a href="https://support.huaweicloud.com/prtg-other-kunpengbds/prtg-other-kunpengbds.pdf">查看PDF</a></p><p><a href="javascript:void(0);">分享</a></p><h3 id="安装rpmbuild工具。"><a href="#安装rpmbuild工具。" class="headerlink" title="安装rpmbuild工具。"></a>安装rpmbuild工具。</h3><pre><code>yum install rpmdevtools</code></pre><h4 id="创建编译rpm包所需的目录。"><a href="#创建编译rpm包所需的目录。" class="headerlink" title="创建编译rpm包所需的目录。"></a>创建编译rpm包所需的目录。</h4><pre><code>mkdir -p ~/rpmbuild/&#123;SOURCES,SPECS&#125;</code></pre><h4 id="下载redis-5-0-4源码tar包，并放入到的SOURCES目录中。"><a href="#下载redis-5-0-4源码tar包，并放入到的SOURCES目录中。" class="headerlink" title="下载redis 5.0.4源码tar包，并放入到的SOURCES目录中。"></a>下载redis 5.0.4源码tar包，并放入到的SOURCES目录中。</h4><pre><code>cd ~/rpmbuild/SOURCESwget http://download.redis.io/releases/redis-5.0.4.tar.gz在这里建议直接下载然后上传到此目录</code></pre><h1 id="-7"><a href="#-7" class="headerlink" title=""></a></h1><h4 id="进入SPECS路径下，新建spec文件。"><a href="#进入SPECS路径下，新建spec文件。" class="headerlink" title="进入SPECS路径下，新建spec文件。"></a>进入SPECS路径下，新建spec文件。</h4><pre><code>cd ~/rpmbuild/SPECSvi redis.spec</code></pre><h1 id="-8"><a href="#-8" class="headerlink" title=""></a></h1><p>输入<strong>i</strong>使得文本处于可插入状态，将下述spec文件内容拷贝进redis.spec中，然后按<strong>esc</strong>后输入**:wq**保存退出。</p><pre><code>Name:           redisVersion:        5.0.4Release:        2Summary:        A persistent key-value databaseLicense:        BSD and MITURL:            https://redis.ioSource:         http://download.redis.io/releases/%&#123;name&#125;-%&#123;version&#125;.tar.gz%descriptionRedis is an advanced key-value store. It is often referred to as a dattructure server since keys can contain strings, hashes,lists, sets anorted sets.%prep%autosetupsed -i &#39;s/daemonize no/daemonize yes/g&#39; redis.confsed -i &#39;s#usr/local#usr#g&#39; ./utils/redis_init_scriptsed -i &#39;s#/$&#123;REDISPORT&#125;##g&#39; ./utils/redis_init_script%buildmake%install%make_install PREFIX=%&#123;buildroot&#125;%&#123;_prefix&#125;mkdir -p %&#123;buildroot&#125;%&#123;_unitdir&#125;install -pDm640 %&#123;name&#125;.conf %&#123;buildroot&#125;%&#123;_sysconfdir&#125;/%&#123;name&#125;.conf%files%&#123;_bindir&#125;/%&#123;name&#125;-*%attr(0755, redis, root) %config(noreplace) %&#123;_sysconfdir&#125;/%&#123;name&#125;.conf%changelog* Fri Jul 24 2020  -5.0.4-2- Add service* Tue Jul 21 2020  -5.0.4-1- Package init</code></pre><h4 id="进入到“rpmbuild-SPECS”路径下执行编译rpm包。"><a href="#进入到“rpmbuild-SPECS”路径下执行编译rpm包。" class="headerlink" title="进入到“rpmbuild/SPECS”路径下执行编译rpm包。"></a>进入到“rpmbuild/SPECS”路径下执行编译rpm包。</h4><pre><code>rpmbuild -ba --target=aarch64 redis.spec</code></pre><p>编译完成的rpm安装包在“~/rpmbuild/RPMS”目录下。</p><h4 id="安装编译后的rpm包。"><a href="#安装编译后的rpm包。" class="headerlink" title="安装编译后的rpm包。"></a>安装编译后的rpm包。</h4><pre><code>cd  /root/rpmbuild/RPMS/aarch64yum install redis-5.0.4-2.aarch64.rpm</code></pre><h4 id="查看安装的版本。"><a href="#查看安装的版本。" class="headerlink" title="查看安装的版本。"></a>查看安装的版本。</h4><pre><code>redis-server -v</code></pre><p><img src="https://support.huaweicloud.com/prtg-other-kunpengbds/zh-cn_image_0000001175780061.png" alt="点击放大"></p><h4 id="对安装后的Redis进行验证。"><a href="#对安装后的Redis进行验证。" class="headerlink" title="对安装后的Redis进行验证。"></a>对安装后的Redis进行验证。</h4><h6 id="编辑redis配置文件"><a href="#编辑redis配置文件" class="headerlink" title="编辑redis配置文件"></a>编辑redis配置文件</h6><pre><code>vi /etc/redis.confport 6371protected-mode no 把yes改为 no（在没有密码的情况下，关闭保护模式）# bind 127.0.0.1     （取消绑定本地地址）daemonize yes #把daemonize no改为yes是否为进程守护，关闭ssh窗口后即是否在后台继续运行）</code></pre><h1 id="-9"><a href="#-9" class="headerlink" title=""></a></h1><h6 id="启动Redis。"><a href="#启动Redis。" class="headerlink" title="启动Redis。"></a>启动Redis。</h6><pre><code>redis-server /etc/redis.conf</code></pre><h1 id="-10"><a href="#-10" class="headerlink" title=""></a></h1><p><img src="https://support.huaweicloud.com/prtg-other-kunpengbds/zh-cn_image_0000001129693690.png" alt="点击放大"></p><h6 id="新开一个终端来连接server，并执行k-v操作。"><a href="#新开一个终端来连接server，并执行k-v操作。" class="headerlink" title="新开一个终端来连接server，并执行k-v操作。"></a>新开一个终端来连接server，并执行k-v操作。</h6><pre><code>#redis-cliredis-cli -p 6371config get requirepass(error) ERR operation not permittedauth 123456config get requirepass</code></pre><p><img src="https://support.huaweicloud.com/prtg-other-kunpengbds/zh-cn_image_0000001175893295.png" alt="img"></p><h6 id="退出客户端连接。"><a href="#退出客户端连接。" class="headerlink" title="退出客户端连接。"></a>退出客户端连接。</h6><pre><code>exit</code></pre><h6 id="关闭Redis服务。"><a href="#关闭Redis服务。" class="headerlink" title="关闭Redis服务。"></a>关闭Redis服务。</h6><pre><code>redis-cli -h 127.0.0.1 -p 6371 shutdownredis-cli -a 123456  -p 6371 shutdown  </code></pre><h6 id="开放远程连接读端口。"><a href="#开放远程连接读端口。" class="headerlink" title="开放远程连接读端口。"></a>开放远程连接读端口。</h6><pre><code>firewall-cmd --list-portsfirewall-cmd --zone=public --add-port=6371/tcp --permanentsystemctl restart firewalld.service</code></pre><h6 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a>远程连接</h6><p>  进行测试</p><h1 id="docker安装mysql"><a href="#docker安装mysql" class="headerlink" title="docker安装mysql"></a>docker安装mysql</h1><h2 id="1-拉取镜像"><a href="#1-拉取镜像" class="headerlink" title="1.    拉取镜像"></a>1.    拉取镜像</h2><p>浏览器输入<a href="https://bbs.huaweicloud.com/forum/thread-62585-1-1.html#">https://hub.docker.com/r/mysql/mysql-server/tags/</a></p><p>查看当前内核可使用的MySQL镜像</p><p><img src="https://bbs-img.huaweicloud.com/data/attachment/forum/202006/29/161353q7ikdhmpaxzbtdqt.png" alt="image.png"></p><p>在服务器上拉取该镜像:    docker pull mysql/mysql-server:8.0.20-1.1.16-aarch64</p><p><img src="https://bbs-img.huaweicloud.com/data/attachment/forum/202006/29/161436k7vzosfjmhk2prlr.png" alt="image.png"></p><h2 id="2-运行容器"><a href="#2-运行容器" class="headerlink" title="2.    运行容器"></a>2.    运行容器</h2><p>运行容器:docker run -d -p  3306:3306 –name=mysqlservice -v  /usr/local/workspace/mysql/conf:/etc/mysql -v  /usr/local/workspace/mysql/data:/var/lib/mysql –restart=always -e  MYSQL_ROOT_PASSWORD=123456 cefadf73f449</p><p><img src="https://bbs-img.huaweicloud.com/data/attachment/forum/202006/29/161527zczha65tbdpw7cxk.png" alt="image.png"></p><p>-d             后台守护进程</p><p>-p             端口指定          本地端口:容器内部端口</p><p>–name        容器名字</p><p>-v             挂载数据卷路径   主机目录:容器目录</p><p>–restart      重启规则</p><p>-e            初始化root用户密码</p><p>cefadf73f449  镜像ID</p><h2 id="3-进入容器设置mysql"><a href="#3-进入容器设置mysql" class="headerlink" title="3.    进入容器设置mysql"></a>3.    进入容器设置mysql</h2><p>进入容器:         docker exec -it mysql-slave0 /bin/bash</p><p>进入mysql:        mysql -uroot -p</p><p><img src="https://bbs-img.huaweicloud.com/data/attachment/forum/202006/29/161703rs03m60oitun8yn1.png" alt="image.png"></p><p>更换数据库: use mysql</p><p>创建用户，赋予远程连接权限:</p><p>CREATE USER ‘mysqlroot‘@’%’ IDENTIFIED WITH mysql_native_password BY ‘123456’;</p><p>GRANT ALL PRIVILEGES ON <em>.</em> TO ‘mysqlroot‘@’%’;</p><p>ALTER USER ‘root‘@’localhost’ IDENTIFIED BY ‘2021123456’;<br>update user set host=’%’ where user = ‘root’;<br>ALTER USER ‘root‘@’%’ IDENTIFIED WITH mysql_native_password BY ‘2021123456’;</p><p>flush privileges;</p><p><img src="https://bbs-img.huaweicloud.com/data/attachment/forum/202006/29/161716hekqjnphbvfozjoa.png" alt="image.png"></p><p>退出</p><p><img src="https://bbs-img.huaweicloud.com/data/attachment/forum/202006/29/161724cmnbla8orsdpmoux.png" alt="image.png"></p><p>附: docker日志存放位置/var/lib/docker/containers/</p><p>先登录mysql</p><p>mysql -u root -p</p><p>输入密码</p><p>mysql&gt; use mysql;</p><p>mysql&gt; select user,host from user;</p><pre><code>+------------------+-----------+| user             | host      |+------------------+-----------+| root             | %         || admin            | localhost || mysql.infoschema | localhost || mysql.session    | localhost || mysql.sys        | localhost || zhangj           | localhost |+------------------+-----------+</code></pre><p>注意我的root，host是’%’</p><p>你可能执行的是:</p><p>ALTER USER ‘root‘@’localhost’ IDENTIFIED WITH mysql_native_password BY ‘123’;</p><p>改成:</p><p>ALTER USER ‘root‘@’%’ IDENTIFIED WITH mysql_native_password BY ‘123’;</p><pre class=" language-sql"><code class="language-sql"><span class="token number">1227</span> <span class="token operator">-</span> Access denied<span class="token punctuation">;</span> you need <span class="token punctuation">(</span>at least one <span class="token keyword">of</span><span class="token punctuation">)</span> the <span class="token keyword">SYSTEM_USER</span> privilege<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">for</span> this operation我查阅了一下官方文档，原因是由于root用户没有<span class="token keyword">SYSTEM_USER</span>权限，把权限加入后即可解决：<span class="token keyword">grant</span> <span class="token keyword">system_user</span> <span class="token keyword">on</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> <span class="token string">'root'</span><span class="token punctuation">;</span></code></pre><h2 id="4-外部连接数据库测试"><a href="#4-外部连接数据库测试" class="headerlink" title="4.    外部连接数据库测试"></a>4.    外部连接数据库测试</h2><p><img src="https://bbs-img.huaweicloud.com/data/attachment/forum/202006/29/161735hc0rx1gmggd4edrt.png" alt="image.png"></p><h2 id="5-参考文档"><a href="#5-参考文档" class="headerlink" title="5.    参考文档"></a>5.    参考文档</h2><p><a href="https://bbs.huaweicloud.com/forum/thread-62585-1-1.html#">https://www.runoob.com/docker/docker-install-mysql.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/09253.html"/>
      <url>/2021/09253.html</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://www.cnblogs.com/">博客园</a></li><li><a href="https://www.cnblogs.com/ming-4/">首页</a></li><li><a href="https://i.cnblogs.com/EditPosts.aspx?opt=1">新随笔</a></li><li><a href="https://msg.cnblogs.com/send/%E5%B0%8F%E5%A4%A7%E5%A4%A7%E5%B0%8F">联系</a></li><li><a href="https://i.cnblogs.com/">管理</a></li><li><a href="javascript:void(0)">订阅</a><a href="https://www.cnblogs.com/ming-4/rss/"><img src="https://www.cnblogs.com/skins/coffee/images/xml.gif" alt="订阅"></a></li></ul><p>随笔- 168 文章- 0 评论- 61 阅读- 88万 </p><h1 id="ARM64架构下面安装mysql5-7-22"><a href="#ARM64架构下面安装mysql5-7-22" class="headerlink" title="ARM64架构下面安装mysql5.7.22"></a><a href="https://www.cnblogs.com/ming-4/p/11690816.html">ARM64架构下面安装mysql5.7.22</a></h1><p>MySQL下载地址为：</p><p><a href="https://obs.cn-north-4.myhuaweicloud.com/obs-mirror-ftp4/database/mysql-5.7.27-aarch64.tar.gz">https://obs.cn-north-4.myhuaweicloud.com/obs-mirror-ftp4/database/mysql-5.7.27-aarch64.tar.gz</a></p><p>\1. 添加mysql用户组和mysql用户，用于隔离mysql进程<br># groupadd -r mysql &amp;&amp; useradd -r -g mysql -s /sbin/nologin -M mysql<br>2.安装依赖库<br># yum install -y libaio*<br>\3. 下载解压Mysql<br># wget <a href="https://obs.cn-north-4.myhuaweicloud.com/obs-mirror-ftp4/database/mysql-5.7.27-aarch64.tar.gz">https://obs.cn-north-4.myhuaweicloud.com/obs-mirror-ftp4/database/mysql-5.7.27-aarch64.tar.gz</a><br># tar xzvf mysql-5.7.27-aarch64.tar.gz -C /usr/local/<br>4.配置Mysql<br># mv /usr/local/mysql-5.7.27-aarch64 /usr/local/mysql<br># mkdir -p /usr/local/mysql/logs<br># chown -R mysql:mysql /usr/local/mysql<br># ln -sf /usr/local/mysql/my.cnf /etc/my.cnf<br># cp -rf /usr/local/mysql/extra/lib* /usr/lib64/<br># mv /usr/lib64/libstdc++.so.6 /usr/lib64/libstdc++.so.6.old<br># ln -s /usr/lib64/libstdc++.so.6.0.24 /usr/lib64/libstdc++.so.6</p><p># 设置开机启动<br># cp -rf /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld<br># chmod +x /etc/init.d/mysqld<br># systemctl enable mysqld<br>\5. 添加环境变量<br># vim /etc/profile</p><p>添加下面两行代码：<br>export MYSQL_HOME=/usr/local/mysql<br>export PATH=$PATH:$MYSQL_HOME/bin</p><p># source /etc/profile</p><p><img src="https://img2018.cnblogs.com/blog/1569426/201910/1569426-20191017103402969-1967192554.png" alt="img"></p><p>\5. 初始化启动mysql<br># 无密码初始化登录<br># mysqld –initialize-insecure –user=mysql –basedir=/usr/local/mysql –datadir=/usr/local/mysql/data</p><p>！！！执行这里出现错误：</p><p><img src="https://img2018.cnblogs.com/blog/1569426/201910/1569426-20191017103441373-1400704578.png" alt="img"></p><p> 解决方法：</p><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><pre><code>vim /etc/my.cnf查看文件，寻找datadir=...查看到：datadir=/usr/local/mysql/data, 这个是data保存目录。进入/usr/local/mysql/data后，查看到确实有数据：将/usr/local/mysql/data备份，cd /usr/local/mysqlmv data data.bak接着执行：mysqld --initialize-insecure --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data</code></pre><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><p>#开启mysql</p><p># systemctl start mysqld</p><p>#查看状态<br># systemctl status mysqld</p><p><img src="https://img2018.cnblogs.com/blog/1569426/201910/1569426-20191017104259421-889993793.png" alt="img"></p><p> 这里表示mysql已经安装成功了。</p><p>因为mysql的这个初始密码安装稍有差池就会出错，之前在Win10上安装也出现过这样的情况，所以这里我们先设置一下不进行密码审核。</p><pre><code>在mysql安装路径找到 my.ini（一般linux系统在/etc/my.ini）vim打开：在 [mysqld] 这一行下：添加 skip-grant-tables 跳过密码校验！！！本人环境下文件名为：my.cnf</code></pre><p>使用：mysql -u root 进行登录 </p><p>！！！某次重启开发板后，出现错误：</p><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><pre><code># mysql -u root-bash: mysql: command not found原因:这是由于系统默认会查找/usr/bin下的命令，如果这个命令不在这个目录下，当然会找不到命令，我们需要做的就是映射一个链接到/usr/bin目录下，相当于建立一个链接文件。首先得知道mysql命令或mysqladmin命令的完整路径，比如mysql的路径是：/usr/local/mysql/bin/mysql，我们则可以这样执行命令：# ln -s /usr/local/mysql/bin/mysql /usr/bin</code></pre><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><p>！！！提示出现错误</p><p><img src="https://img2018.cnblogs.com/blog/1569426/201910/1569426-20191017105050417-1583653776.png" alt="img"></p><p> 原因是缺少libncurses.so.5共享库。</p><p>解决方法：</p><pre><code>本人使用的是EAIDK-610开发板，在板子的/lib64文件夹下查看到系统拥有libncurses.so.6.1的文件。所以使用软连接创建一个libncurses.so.6.1指向libncurses.so.5的连接，这个共享库可以向下兼容。具体参考下面图片事例。</code></pre><p><img src="https://img2018.cnblogs.com/blog/1569426/201910/1569426-20191017105516569-1227537043.png" alt="img"></p><p>再次使用：mysql -u root 进行登录，登录成功。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/092416108.html"/>
      <url>/2021/092416108.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="create-new-blog"><a href="#create-new-blog" class="headerlink" title="create new blog"></a>create new blog</h3><pre class=" language-bash"><code class="language-bash">$ hexo n <span class="token string">"我的博客"</span></code></pre><h3 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h3><pre class=" language-bash"><code class="language-bash">$ hexo g -d</code></pre>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
